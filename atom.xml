<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adison&#39;s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.adisonhyh.com/"/>
  <updated>2017-03-14T18:23:51.000Z</updated>
  <id>http://blog.adisonhyh.com/</id>
  
  <author>
    <name>Adison</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从自定义FrameCallback理解Choreographer原理</title>
    <link href="http://blog.adisonhyh.com/2017/03/15/%E4%BB%8E%E8%87%AA%E5%AE%9A%E4%B9%89FrameCallback%E7%90%86%E8%A7%A3Choreographer%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.adisonhyh.com/2017/03/15/从自定义FrameCallback理解Choreographer原理/</id>
    <published>2017-03-14T18:16:07.000Z</published>
    <updated>2017-03-14T18:23:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说，Choreographer主要作用是协调动画，输入和绘制的时间，它从显示子系统接收定时脉冲（例如垂直同步），然后安排渲染下一个frame的一部分工作。</p>
<h2 id="自定义FrameCallback"><a href="#自定义FrameCallback" class="headerlink" title="自定义FrameCallback"></a>自定义FrameCallback</h2><p>FrameCallback是和Choreographer交互，在下一个frame被渲染时触发的接口类。开发者可以设置自己的FrameCallback。我们就从自定义FrameCallback作为切入口，尝试窥探一下Choreographer的实现原理。简单实现如下：</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Choreographer_test"</span>;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">     <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">     setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">     <span class="keyword">final</span> ImageView imageView= (ImageView) findViewById(R.id.iv_anim);</div><div class="line">     imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">             <span class="keyword">final</span> <span class="keyword">long</span> starTime=System.nanoTime();</div><div class="line">             Choreographer.getInstance().postFrameCallback(<span class="keyword">new</span> Choreographer.FrameCallback() &#123;</div><div class="line">                 <span class="meta">@Override</span></div><div class="line">                 <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</div><div class="line">                     Log.e(TAG,<span class="string">"starTime="</span>+starTime+<span class="string">", frameTimeNanos="</span>+frameTimeNanos+<span class="string">", frameDueTime="</span>+(frameTimeNanos-starTime)/<span class="number">1000000</span>);</div><div class="line">                 &#125;</div><div class="line">             &#125;);</div><div class="line">         &#125;</div><div class="line">     &#125;);</div><div class="line"></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>在这里，我们自定义的FrameCallback只是简单把时间打印了一下。输入如下信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">E/Choreographer_test: starTime=<span class="number">232157742945242</span>, frameTimeNanos=<span class="number">232157744964255</span>, frameDueTime=<span class="number">2</span></div></pre></td></tr></table></figure>
<p>从log可以看出，这一帧大概2ms就处理完毕。下面我们从源码角度窥探一下它具体的实现原理。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="1-关键成员变量"><a href="#1-关键成员变量" class="headerlink" title="1. 关键成员变量"></a>1. 关键成员变量</h3><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Choreographer</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">     mLooper = looper;</div><div class="line">  	<span class="comment">//1.创建Handler对象，用于处理消息</span></div><div class="line">     mHandler = <span class="keyword">new</span> FrameHandler(looper);</div><div class="line">  	<span class="comment">//2.创建接收VSYNC信号的对象</span></div><div class="line">     mDisplayEventReceiver = USE_VSYNC ? <span class="keyword">new</span> FrameDisplayEventReceiver(looper) : <span class="keyword">null</span>;</div><div class="line">  	<span class="comment">//3.初始化上一次frame渲染的时间点</span></div><div class="line">     mLastFrameTimeNanos = Long.MIN_VALUE;</div><div class="line">  	<span class="comment">//4.帧率，也就是渲染一帧的时间，getRefreshRate是刷新率，一般是60</span></div><div class="line">     mFrameIntervalNanos = (<span class="keyword">long</span>)(<span class="number">1000000000</span> / getRefreshRate());</div><div class="line">  	<span class="comment">//5.创建回调队列</span></div><div class="line">     mCallbackQueues = <span class="keyword">new</span> CallbackQueue[CALLBACK_LAST + <span class="number">1</span>];</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= CALLBACK_LAST; i++) &#123;</div><div class="line">         mCallbackQueues[i] = <span class="keyword">new</span> CallbackQueue();</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="FrameHandler"><a href="#FrameHandler" class="headerlink" title="FrameHandler"></a>FrameHandler</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="title">FrameHandler</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">           <span class="keyword">super</span>(looper);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">           <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">               <span class="keyword">case</span> MSG_DO_FRAME:</div><div class="line">               	<span class="comment">//渲染下一个frame</span></div><div class="line">                   doFrame(System.nanoTime(), <span class="number">0</span>);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MSG_DO_SCHEDULE_VSYNC:</div><div class="line">               	<span class="comment">//请求VSNYC信号</span></div><div class="line">                   doScheduleVsync();</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">               <span class="keyword">case</span> MSG_DO_SCHEDULE_CALLBACK:</div><div class="line">               	<span class="comment">//执行Callback</span></div><div class="line">                   doScheduleCallback(msg.arg1);</div><div class="line">                   <span class="keyword">break</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="FrameDisplayEventReceiver"><a href="#FrameDisplayEventReceiver" class="headerlink" title="FrameDisplayEventReceiver"></a>FrameDisplayEventReceiver</h4><p>FrameDisplayEventReceiver是DisplayEventReceiver的子类，DisplayEventReceiver是接收VSYNC信息的java层实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DisplayEventReceiver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">int</span> builtInDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduleVsync</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mReceiverPtr == <span class="number">0</span>) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"Attempted to schedule a vertical sync pulse but the display event "</span></div><div class="line">                    + <span class="string">"receiver has already been disposed."</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            nativeScheduleVsync(mReceiverPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatchVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">int</span> builtInDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;</div><div class="line">        onVsync(timestampNanos, builtInDisplayId, frame);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>VSYNC信息一般由硬件中断产生，SurfaceFlinger处理。具体实现和监听机制可以参考<a href="http://gityuan.com/2017/02/11/surface_flinger/" target="_blank" rel="external">链接</a>，<code>scheduleVsync</code>方法用于请求VSNYC信号，  Native方法接收到VSYNC信息处理后会调用java层<code>dispatchVsync</code>方法，最终调用到FrameDisplayEventReceiver的<code>onVsync</code>方法，具体实现我们一会再说。</p>
<h4 id="CallbackQueue"><a href="#CallbackQueue" class="headerlink" title="CallbackQueue"></a>CallbackQueue</h4><p>CallbackQueue是个单链表实现，每种类型的callback(CallbackRecord)按照设置的执行时间(dueTime)顺序排序分别保存在其各自CallbackQueue。在Choreographer中有四种类型callback：Input、Animation、Draw，还有一种是用来解决动画启动问题的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackQueue</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> CallbackRecord mHead;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasDueCallbacksLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> mHead != <span class="keyword">null</span> &amp;&amp; mHead.dueTime &lt;= now;</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//根据当前时间得到callback</span></div><div class="line">        <span class="function"><span class="keyword">public</span> CallbackRecord <span class="title">extractDueCallbacksLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</div><div class="line">       		  ....</div><div class="line">              ....</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//根据时间添加callback</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCallbackLocked</span><span class="params">(<span class="keyword">long</span> dueTime, Object action, Object token)</span> </span>&#123;</div><div class="line">           	....</div><div class="line">            ....</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//移除callback</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeCallbacksLocked</span><span class="params">(Object action, Object token)</span> </span>&#123;</div><div class="line">          		 ....</div><div class="line">            	 ....</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="2-流程分析"><a href="#2-流程分析" class="headerlink" title="2. 流程分析"></a>2. 流程分析</h3><p>大致分析完Choreographer关键的几个成员变量后，我们再回到<code>postFrameCallback</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postFrameCallbackDelayed</span><span class="params">(FrameCallback callback, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (callback == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"callback must not be null"</span>);</div><div class="line">      &#125;</div><div class="line"><span class="comment">//默认为CALLBACK_ANIMATION类型</span></div><div class="line">      postCallbackDelayedInternal(CALLBACK_ANIMATION,</div><div class="line">              callback, FRAME_CALLBACK_TOKEN, delayMillis);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="postCallbackDelayedInternal"><a href="#postCallbackDelayedInternal" class="headerlink" title="postCallbackDelayedInternal"></a>postCallbackDelayedInternal</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postCallbackDelayedInternal</span><span class="params">(<span class="keyword">int</span> callbackType,</span></span></div><div class="line">            Object action, Object token, <span class="keyword">long</span> delayMillis) &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> dueTime = now + delayMillis;</div><div class="line">          	<span class="comment">//添加callback到回调队列</span></div><div class="line">            mCallbackQueues[callbackType].addCallbackLocked(dueTime, action, token);</div><div class="line">            <span class="keyword">if</span> (dueTime &lt;= now) &#123;</div><div class="line">                scheduleFrameLocked(now);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//设定的执行时间在当前时间之后,发送MSG_DO_SCHEDULE_CALLBACK，由FrameHanlder安排执行scheduleFrameLocked</span></div><div class="line">                Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_CALLBACK, action);</div><div class="line">                msg.arg1 = callbackType;</div><div class="line">                msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">                mHandler.sendMessageAtTime(msg, dueTime);`</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="scheduleFrameLocked"><a href="#scheduleFrameLocked" class="headerlink" title="scheduleFrameLocked"></a>scheduleFrameLocked</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">scheduleFrameLocked</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</div><div class="line">  		 	....</div><div class="line">             <span class="keyword">if</span> (isRunningOnLooperThreadLocked()) &#123;</div><div class="line">               <span class="comment">//若当前线程是UI线程，执行scheduleVsyncLocked请求VSYNC信号</span></div><div class="line">               scheduleVsyncLocked();</div><div class="line">             &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="comment">//非UI线程，发送MSG_DO_SCHEDULE_VSYNC消息到主线程</span></div><div class="line">               Message msg = mHandler.obtainMessage(MSG_DO_SCHEDULE_VSYNC);</div><div class="line">               msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">               mHandler.sendMessageAtFrontOfQueue(msg);</div><div class="line">             &#125;</div><div class="line">       	 ....</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>scheduleVsyncLocked最终调用FrameDisplayEventReceiver#scheduleVsync，收到Vsync信息后，调用FrameDisplayEventReceiver#onVsync</p>
</blockquote>
<h4 id="FrameDisplayEventReceiver-onVsync"><a href="#FrameDisplayEventReceiver-onVsync" class="headerlink" title="FrameDisplayEventReceiver#onVsync"></a>FrameDisplayEventReceiver#onVsync</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FrameDisplayEventReceiver</span> <span class="keyword">extends</span> <span class="title">DisplayEventReceiver</span></span></div><div class="line">         <span class="keyword">implements</span> <span class="title">Runnable</span> &#123;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">boolean</span> mHavePendingVsync;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">long</span> mTimestampNanos;</div><div class="line">     <span class="keyword">private</span> <span class="keyword">int</span> mFrame;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">FrameDisplayEventReceiver</span><span class="params">(Looper looper)</span> </span>&#123;</div><div class="line">         <span class="keyword">super</span>(looper);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onVsync</span><span class="params">(<span class="keyword">long</span> timestampNanos, <span class="keyword">int</span> builtInDisplayId, <span class="keyword">int</span> frame)</span> </span>&#123;</div><div class="line">    		....</div><div class="line">    		....</div><div class="line">         mTimestampNanos = timestampNanos;</div><div class="line">         mFrame = frame;</div><div class="line">       	<span class="comment">//该消息的callback为当前对象FrameDisplayEventReceiver,收到消息调用其run方法,然后调用doFrame方法</span></div><div class="line">         Message msg = Message.obtain(mHandler, <span class="keyword">this</span>);</div><div class="line">         msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">         mHandler.sendMessageAtTime(msg, timestampNanos / TimeUtils.NANOS_PER_MS);</div><div class="line">     &#125;</div><div class="line"></div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">         mHavePendingVsync = <span class="keyword">false</span>;</div><div class="line">         doFrame(mTimestampNanos, mFrame);</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="doFrame"><a href="#doFrame" class="headerlink" title="doFrame"></a>doFrame</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos, <span class="keyword">int</span> frame)</span> </span>&#123;</div><div class="line">  		....</div><div class="line">        <span class="comment">//Vsync信号到来时间    </span></div><div class="line">        <span class="keyword">long</span> intendedFrameTimeNanos = frameTimeNanos;</div><div class="line">  		<span class="comment">//实际开始执行当前frame的时间</span></div><div class="line">        startNanos = System.nanoTime();</div><div class="line">  		<span class="comment">//时间差</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> jitterNanos = startNanos - frameTimeNanos;</div><div class="line">  		<span class="comment">//时间差大于帧率，则认为是跳帧</span></div><div class="line">        <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> skippedFrames = jitterNanos / mFrameIntervalNanos;</div><div class="line">            <span class="keyword">if</span> (skippedFrames &gt;= SKIPPED_FRAME_WARNING_LIMIT) &#123;</div><div class="line">                Log.i(TAG, <span class="string">"Skipped "</span> + skippedFrames + <span class="string">" frames!  "</span></div><div class="line">                        + <span class="string">"The application may be doing too much work on its main thread."</span>);</div><div class="line">            &#125;</div><div class="line">          ....</div><div class="line">          ....</div><div class="line">         <span class="comment">//记录当前frame信息   </span></div><div class="line">        mFrameInfo.setVsync(intendedFrameTimeNanos, frameTimeNanos);</div><div class="line">        mFrameScheduled = <span class="keyword">false</span>;</div><div class="line">          <span class="comment">//记录上一次frame渲染的时间点</span></div><div class="line">        mLastFrameTimeNanos = frameTimeNanos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      	<span class="comment">//执行CallBack，优先级为：CALLBACK_INPUT&gt;CALLBACK_ANIMATION&gt;CALLBACK_TRAVERSAL&gt;CALLBACK_COMMIT</span></div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, <span class="string">"Choreographer#doFrame"</span>);</div><div class="line">        mFrameInfo.markInputHandlingStart();</div><div class="line">        doCallbacks(Choreographer.CALLBACK_INPUT, frameTimeNanos);</div><div class="line">        mFrameInfo.markAnimationsStart();</div><div class="line">        doCallbacks(Choreographer.CALLBACK_ANIMATION, frameTimeNanos);</div><div class="line">        mFrameInfo.markPerformTraversalsStart();</div><div class="line">        doCallbacks(Choreographer.CALLBACK_TRAVERSAL, frameTimeNanos);</div><div class="line">        doCallbacks(Choreographer.CALLBACK_COMMIT, frameTimeNanos);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">    &#125;</div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="doCallbacks"><a href="#doCallbacks" class="headerlink" title="doCallbacks"></a>doCallbacks</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doCallbacks</span><span class="params">(<span class="keyword">int</span> callbackType, <span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</div><div class="line">    CallbackRecord callbacks;</div><div class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> now = System.nanoTime();</div><div class="line">      	<span class="comment">// 从队列查找相应类型的CallbackRecord对象</span></div><div class="line">        callbacks = mCallbackQueues[callbackType].extractDueCallbacksLocked(</div><div class="line">                now / TimeUtils.NANOS_PER_MS);</div><div class="line">        <span class="keyword">if</span> (callbacks == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        mCallbacksRunning = <span class="keyword">true</span>;</div><div class="line">      ....</div><div class="line">      ....  </div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_VIEW, CALLBACK_TRACE_TITLES[callbackType]);</div><div class="line">        <span class="keyword">for</span> (CallbackRecord c = callbacks; c != <span class="keyword">null</span>; c = c.next) &#123;</div><div class="line">            ....</div><div class="line">            <span class="comment">//调用CallbackRecord的run方法</span></div><div class="line">            c.run(frameTimeNanos);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</div><div class="line">            mCallbacksRunning = <span class="keyword">false</span>;</div><div class="line">          	<span class="comment">//回收callbacks，加入mCallbackPool对象池</span></div><div class="line">            do &#123;</div><div class="line">                <span class="keyword">final</span> CallbackRecord next = callbacks.next;</div><div class="line">                recycleCallbackLocked(callbacks);</div><div class="line">                callbacks = next;</div><div class="line">            &#125; <span class="keyword">while</span> (callbacks != <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_VIEW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="CallbackRecord-run"><a href="#CallbackRecord-run" class="headerlink" title="CallbackRecord#run"></a>CallbackRecord#run</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span> (token == FRAME_CALLBACK_TOKEN) &#123;</div><div class="line">      <span class="comment">//调用自定义FrameCallback的doFrame方法</span></div><div class="line">     ((FrameCallback)action).doFrame(frameTimeNanos);</div><div class="line">   &#125; <span class="keyword">else</span> &#123;</div><div class="line">     ((Runnable)action).run();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，关于Choreographer的整个调用流程及其原理已经分析完成。至于系统某些调用，如View的<code>invalidate</code>，触发<code>ViewRootImpl#scheduleTraversals</code>，最终调用<code>Choreographer#postCallback(        Choreographer.CALLBACK_TRAVERSAL, mTraversalRunnable, null);</code>，只是明确了Callbac的类型以及回调处理Runnable而已，基本流程和自定义FrameCallback一样。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>尽量避免在执行动画或渲染操作<strong>之后</strong>在主线程执行操作，在<strong>之前或之后</strong>都应该尽量避免发送消息到主线程looper</p>
</li>
<li><p>既然自定义FrameCallback可以在下一个frame被渲染的时候会被回调，那我们是不是可以根据这个原理实现应用的帧率监听呢，答案是肯定的，下面是我的简单实现:</p>
</li>
</ul>
<p>1.自定义FrameCallback：FPSFrameCallback</p>
  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FPSFrameCallback</span> <span class="keyword">implements</span> <span class="title">Choreographer</span>.<span class="title">FrameCallback</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"FPS_TEST"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mLastFrameTimeNanos = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mFrameIntervalNanos;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FPSFrameCallback</span><span class="params">(<span class="keyword">long</span> lastFrameTimeNanos)</span> </span>&#123;</div><div class="line">        mLastFrameTimeNanos = lastFrameTimeNanos;</div><div class="line">        mFrameIntervalNanos = (<span class="keyword">long</span>)(<span class="number">1000000000</span> / <span class="number">60.0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFrame</span><span class="params">(<span class="keyword">long</span> frameTimeNanos)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//初始化时间</span></div><div class="line">        <span class="keyword">if</span> (mLastFrameTimeNanos == <span class="number">0</span>) &#123;</div><div class="line">            mLastFrameTimeNanos = frameTimeNanos;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> jitterNanos = frameTimeNanos - mLastFrameTimeNanos;</div><div class="line">        <span class="keyword">if</span> (jitterNanos &gt;= mFrameIntervalNanos) &#123;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> skippedFrames = jitterNanos / mFrameIntervalNanos;</div><div class="line">            <span class="keyword">if</span>(skippedFrames&gt;<span class="number">30</span>)&#123;</div><div class="line">                Log.i(TAG, <span class="string">"Skipped "</span> + skippedFrames + <span class="string">" frames!  "</span></div><div class="line">                        + <span class="string">"The application may be doing too much work on its main thread."</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mLastFrameTimeNanos=frameTimeNanos;</div><div class="line">        <span class="comment">//注册下一帧回调</span></div><div class="line">        Choreographer.getInstance().postFrameCallback(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.在Application中注册</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>.onCreate();</div><div class="line">       Choreographer.getInstance().postFrameCallback(<span class="keyword">new</span> FPSFrameCallback(System.nanoTime()));</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>3.测试</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Thread.sleep(<span class="number">1000</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LOG输出如下：</p>
<pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/Choreographer: Skipped <span class="number">64</span> frames!  The application may be doing too much work on its main thread.</div><div class="line">I/FPS_TEST: Skipped <span class="number">65</span> frames!  The application may be doing too much work on its main thread.</div></pre></td></tr></table></figure>
</code></pre><p>基本和系统监控数值一致</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单来说，Choreographer主要作用是协调动画，输入和绘制的时间，它从显示子系统接收定时脉冲（例如垂直同步），然后安排渲染下一个frame的一部分工作。&lt;/p&gt;
&lt;h2 id=&quot;自定义FrameCallback&quot;&gt;&lt;a href=&quot;#自定义FrameCallback&quot; class=&quot;headerlink&quot; title=&quot;自定义FrameCallback&quot;&gt;&lt;/a&gt;自定义FrameCallback&lt;/h2&gt;&lt;p&gt;FrameCallback是和Choreographer交互，在下一个frame被渲染时触发的接口类。开发者可以设置自己的FrameCallback。我们就从自定义FrameCallback作为切入口，尝试窥探一下Choreographer的实现原理。简单实现如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="Android源码分析" scheme="http://blog.adisonhyh.com/tags/Android%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【译】Android: 自定义View</title>
    <link href="http://blog.adisonhyh.com/2016/11/27/%E3%80%90%E8%AF%91%E3%80%91Android-%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    <id>http://blog.adisonhyh.com/2016/11/27/【译】Android-自定义View/</id>
    <published>2016-11-27T12:02:30.000Z</published>
    <updated>2016-11-27T17:32:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://medium.com/@romandanylyk96/android-draw-a-custom-view-ef79fe2ff54b#.hl4rzavps" target="_blank" rel="external">原文链接</a><br>部分译文是按自己的理解翻译的，如有错漏，还请指正</p>
</blockquote>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>每天我们都会使用很多的应用程序，尽管他们有不同的约定，但大多数应用的设计是非常相似的。这就是为什么许多客户要求使用一些其他应用程序没有的设计，使得应用程序显得独特和不同。</p>
<p>如果功能布局要求非常定制化，已经不能由Android内置的View创建 —这时候就需要使用自定义View了。而这意味着在大多数情况下，我们将需要相当长的时间来完成它。但这并不意味着我们不应该这样做，因为实现它是非常令人兴奋和有趣的。</p>
<p>我最近面临了类似的情况：我的任务是使用<code>ViewPager</code>实现Android应用引导页。不同于iOS，Android并没有提供这样的View，所以我不得不编写一个自定义View来实现它。</p>
<a id="more"></a>
<p>我花了一些时间来实现它。幸运的是，时下很多开源项目都有类似可复用的View，这节省了我和其他开发者的时间。我决定基于这种View创建一个公共库。如果你有类似的功能需求并且缺乏时间实现它，可以在<a href="https://github.com/romandanylyk/PageIndicatorView" target="_blank" rel="external">github repo</a>发现它。</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8mN6jw1fa6wt5s02sj30rs0kgdl1.jpg" alt="Sample of using PageIndicatorView"></p>
<h3 id="绘制！"><a href="#绘制！" class="headerlink" title="绘制！"></a>绘制！</h3><p>因为编写自定义View比起普通的View更耗时，你应该只在为了实现特定的功能但没有更简单的方法情况下使用自定义View，或者你希望通过自定义View解决以下问题：</p>
<ol>
<li>性能。如果你布局里面有很多View，你想通自定义View优化它，使其更轻量。</li>
<li>视图层次结构复杂。</li>
<li>一个完全自定义的View，需要手动绘制才能实现。</li>
</ol>
<p>如果你还没有尝试过编写自定义View，这篇文章将教会你绘制扁平的自定义View的一些技巧。我将会告诉你整体的视图结构，如何实现具体的功能，不要重犯常见的错误，以及实现动画效果！</p>
<p>我们需要知道的第一件事 –View的生命周期。不知出于某种原因，谷歌并没有提供View生命周期的图表，由于开发者普遍对其有误解，导致了一些意想不到的错误和问题，所以我们要认清这过程。</p>
<p><img src="http://ww3.sinaimg.cn/large/006y8mN6jw1fa6wv170ruj30j80gzgmg.jpg" alt="view lifecycle"></p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>每个View的生命都是从构造函数开始。而且这是一个绘制初始化，进行各种计算，设定默认值或做任何我们需要的事情很好的地方。</p>
<p>但是，为了使我们的View更易于使用和配置，Android提供了很有用的<code>AttributeSet</code>接口。它很容易实现，而且绝对值得花时间去了解和实现它，因为它会帮助你（和你的团队）通过静态参数来设置View，对于以后新特性加入或者新屏幕拓展性支持也更好。</p>
<p>首先，创建一个新的文件<code>attrs.xml</code>。所有不同的自定义View属性都可以放在该文件中。正如你看到的这个例子，我们有一个PageIndicatorView和它的唯一属性piv_count。</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8mN6jw1fa6ww7kfjoj30jg078gmz.jpg" alt="Custom Attributes sample"></p>
<p>紧接着在View的构造函数中，你需要获取这个属性并使用它，如下图所示。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">PageIndicatorView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs);</div><div class="line">    TypedArray typedArray = getContext().obtainStyledAttributes(attrs, R.styleable.PageIndicatorView);</div><div class="line">    <span class="keyword">int</span> count = typedArray.getInt(R.styleable.PageIndicatorView_piv_count,<span class="number">0</span>);</div><div class="line">    typedArray.recycle();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ul>
<li>在创建自定义属性使用一个简单的前缀，以避免与其它View类似的属性名称冲突。一般我们使用View名称缩写，就像例子中的piv_。</li>
<li>如果你使用的是Android Studio，一旦你使用完属性，lint会建议你调用<code>recycle()</code>方法 。The reason is just to get rid of inefficiently bound data that’s not gonna be used again。[译者注：翻译有点拗口，其实就是回收TypedArray，以便后面重用]</li>
</ul>
<h4 id="onAttachedToWindow"><a href="#onAttachedToWindow" class="headerlink" title="onAttachedToWindow"></a>onAttachedToWindow</h4><p>父View调用<code>addView(View)</code>后，这个View将被依附到一个窗口。在这个阶段，我们的View会知道它被包围的其他view。如果你的View和其他View在相同的<code>layout.xml</code>,这是通过id找到他们的好地方（你可以通过属性进行设置），同时可以保存为全局（如果需要）的引用。</p>
<h4 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h4><p>这意味着我们的自定义View到了处理自己的大小的时候。这是非常重要的方法，因为在大多数情况下，你的View需要有特定的大小以适应你的布局。</p>
<p>当你重写此方法，需要记得的是，最终要设置<code>setMeasuredDimension(int width, int height)</code> 。</p>
<p><img src="http://ww3.sinaimg.cn/large/006y8mN6jw1fa6wxn1amij30m806edg6.jpg" alt="onMeasure"></p>
<p>当处理自定义View的大小时候，使用者可能通过<code>layout.xml</code>或者动态设置了具体的大小。要正确地计算它，我们需要做几件事情。</p>
<ol>
<li>计算你的View内容所需的大小（宽度和高度）。</li>
<li>获取你的View MeasureSpec大小和模式（宽度和高度）。</li>
</ol>
<p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> widthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> widthSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line">        <span class="keyword">int</span> heightSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>检查MeasureSpec 设置和调整View（宽度和高度）的尺寸模式。</li>
</ol>
<p>​<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> width;</div><div class="line"><span class="keyword">if</span> (widthMode == MeasureSpec.EXACTLY) &#123;</div><div class="line">  width = widthSize;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (widthMode == MeasureSpec.AT_MOST) &#123;</div><div class="line">  width = Math.min(desiredWidth, widthSize);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  width = desiredWidth;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="注意：-1"><a href="#注意：-1" class="headerlink" title="注意："></a>注意：</h5><p>看看MeasureSpec的值：</p>
<ul>
<li>MeasureSpec.EXACTLY 意味着硬编码大小值，所以你应该设置指定的宽度或高度。</li>
<li>MeasureSpec.AT_MOST 用于表明你的View匹配父View的大小，<br> 所以它应该和他想要的大小一样大。<br> [译者注：此时View尺寸只要不超过父View允许的最大尺寸即可]</li>
<li>MeasureSpec.UNSPECIFIED 实际上是视图包装尺寸。因此，你可以使用上面计算所需的大小。</li>
</ul>
<p>在通过<code>setMeasuredDimension</code>设置最终值之前，以防万一，可以检查这些值不为负数。这可以避免在布局预览时一些问题。</p>
<h4 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h4><p>此方法分配大小和位置给它的每一个子View。正因为如此，我们正在研究一个扁平的自定义视图（继承简单的View）不具有任何子View，那么就没有理由重写此方法。[译者注：实现可以参考<a href="http://lucasr.org/2014/05/12/custom-layouts-on-android/" target="_blank" rel="external">Custom Layouts on Android</a>]</p>
<h4 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h4><p>这就是发生魔法的地方。在这里，使用<code>Canvas</code>和<code>Paint</code>对象你将可以画任何你需要的东西。<br>一个<code>Canvas</code>实例从onDraw参数得来，它一般用于绘制不同形状，而<code>Paint</code>对象定义形状颜色。简单地说，<code>Canvas</code>用于绘制对象，而<code>Paint</code>用于造型。它们无处不在，无论绘制的是一个直线，圆或长方形。</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8mN6jw1fa6wyjfpu2j30jg0780uv.jpg" alt="onDraw() — methods example"></p>
<p>使自定义View，要始终牢记onDraw会花费大量的时间。当布局有一些变化，滚动、快速滑动都会导致重新绘制。所以这就是为什么Android Studio也建议：避免在onDraw中进行对象分配的操作，对象应该只创建一次并在将来重用。</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8mN6jw1fa6wz81yhnj30jg078gmy.jpg" alt="onDraw() — Paint object recreation"></p>
<p><img src="http://ww4.sinaimg.cn/large/006y8mN6jw1fa6wzrpnxaj30jg078mxy.jpg" alt="onDraw() — Paint object reuse"></p>
<h5 id="注意：-2"><a href="#注意：-2" class="headerlink" title="注意："></a>注意：</h5><ul>
<li>在执行绘制时始终牢记重用对象，而不创建新的。不要依赖于IDE高亮一个潜在的问题，而是自己有意识地去做这件事，因为在onDraw调用一个内部会创建对象的方法时，IDE无法识别它。</li>
<li>同时请不要硬编码View大小。其他开发者在使用时可以定义不同的大小，所以View大小应该取决于它有什么尺寸。</li>
</ul>
<h4 id="View-更新"><a href="#View-更新" class="headerlink" title="View 更新"></a>View 更新</h4><p>从View的生命周期图可以得知，可以重绘View自身有两种方法。<code>invalidate()</code>和<code>requestLayout()</code>方法会帮助你在运行时动态改变View状态。但为什么需要两个方法？</p>
<ul>
<li><code>invalidate()</code>用来简单重绘View。例如更新其文本，色彩或触摸交互性。View将只调用<code>onDraw()</code>方法再次更新其状态。</li>
<li><code>requestLayout()</code>方法，你可以看到其将会从`onMeasure()开始更新View。这意味着你的View更新后，它改变它的大小，你需要再次测量它，并依赖于新的大小来重新绘制。</li>
</ul>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>在自定义View中，动画是一帧一帧的过程。这意味着，如果你想使一个圆半径从小变大，你将需要逐步增加半径并调用<code>invalidate()</code>来重绘它。</p>
<p>在自定义View动画中，ValueAnimator是你的好朋友。下面这个类将帮助你从任何值开始执行动画到最后，甚至支持<code>Interpolator</code>（如果需要）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ValueAnimator animator = ValueAnimator.ofInt(<span class="number">0</span>, <span class="number">100</span>);</div><div class="line">animator.setDuration(<span class="number">1000</span>);</div><div class="line">animator.setInterpolator(<span class="keyword">new</span> DecelerateInterpolator());</div><div class="line">animator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> newRadius = (<span class="keyword">int</span>) animation.getAnimatedValue();</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h5 id="注意：-3"><a href="#注意：-3" class="headerlink" title="注意："></a>注意：</h5><p>当每一次新的动画值出来时，不要忘记调用<code>invalidate()</code>。</p>
<p><img src="http://ww3.sinaimg.cn/large/006y8mN6jw1fa6x0i3iwug30ci08wty5.gif" alt="Sample of animation via ValueAnimator"></p>
<p>希望这篇文章可以帮助你实现你的第一个自定义View，如果你想更多地了解它，可以看看这个<a href="https://www.youtube.com/watch?v=4NNmMO8Aykw&amp;feature=youtu.be" target="_blank" rel="external">视频</a>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/@romandanylyk96/android-draw-a-custom-view-ef79fe2ff54b#.hl4rzavps&quot;&gt;原文链接&lt;/a&gt;&lt;br&gt;部分译文是按自己的理解翻译的，如有错漏，还请指正&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;每天我们都会使用很多的应用程序，尽管他们有不同的约定，但大多数应用的设计是非常相似的。这就是为什么许多客户要求使用一些其他应用程序没有的设计，使得应用程序显得独特和不同。&lt;/p&gt;
&lt;p&gt;如果功能布局要求非常定制化，已经不能由Android内置的View创建 —这时候就需要使用自定义View了。而这意味着在大多数情况下，我们将需要相当长的时间来完成它。但这并不意味着我们不应该这样做，因为实现它是非常令人兴奋和有趣的。&lt;/p&gt;
&lt;p&gt;我最近面临了类似的情况：我的任务是使用&lt;code&gt;ViewPager&lt;/code&gt;实现Android应用引导页。不同于iOS，Android并没有提供这样的View，所以我不得不编写一个自定义View来实现它。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="翻译" scheme="http://blog.adisonhyh.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>[译]Android 泄露范例: 视图订阅</title>
    <link href="http://blog.adisonhyh.com/2016/09/25/%E8%AF%91-Android-%E6%B3%84%E9%9C%B2%E8%8C%83%E4%BE%8B-%E8%A7%86%E5%9B%BE%E8%AE%A2%E9%98%85/"/>
    <id>http://blog.adisonhyh.com/2016/09/25/译-Android-泄露范例-视图订阅/</id>
    <published>2016-09-25T15:59:00.000Z</published>
    <updated>2016-09-25T16:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="https://medium.com/square-corner-blog/android-leak-pattern-subscriptions-in-views-18f0860aa74c#.t4v4aoudx" target="_blank" rel="external">原文链接</a></p>
</blockquote>
<p>在<a href="https://play.google.com/store/apps/details?id=com.squareup" target="_blank" rel="external">Square Register</a>中，我们依赖于自定义View来构建我们的应用程序。有时，View监听某个对象的变化，但对象的生命周期往往比该View还要长。</p>
<p>举个例子，HeaderView可能需要从一个授权验证器单例监听用户名变化。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Authenticator authenticator;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HeaderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> TextView usernameView = (TextView) findViewById(R.id.username);</div><div class="line">    authenticator.username().subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String username)</span> </span>&#123;</div><div class="line">        usernameView.setText(username);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>onFinishInflate() 是一个已经加载的自定义View去查找其子View的好地方，所以我们在此查找其子View，然后订阅用户名的变化。</p>
<p>上面的代码有一个<strong>严重的bug</strong>：我们<strong>没有退订操作</strong>。当View被移除，<code>Action1</code>仍然处于订阅状态。因为<code>Action1</code>是一个匿名内部类，它持有外部类的引用— HeaderView。整个View树现在被泄露了，而且不能被GC回收。</p>
<p>修复这个bug，一般做法是在该View  detached Window时退订，亦即onDetachedFromWindow()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Authenticator authenticator;</div><div class="line">  <span class="keyword">private</span> Subscription usernameSubscription;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HeaderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> TextView usernameView = (TextView) findViewById(R.id.username);</div><div class="line">    usernameSubscription = authenticator.username().subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String username)</span> </span>&#123;...&#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    usernameSubscription.unsubscribe();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>问题解决？其实并没完全解决。我最近看到一个<a href="https://github.com/square/leakcanary" target="_blank" rel="external">LeakCanary</a>报告,一段非常相似代码也引起该问题。</p>
<p><img src="http://ww1.sinaimg.cn/large/006y8lVajw1f86a2uai68j30tm18gq6d.jpg" alt="LeakCanary"></p>
<p>让我们再次查看代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Authenticator authenticator;</div><div class="line">  <span class="keyword">private</span> Subscription usernameSubscription;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HeaderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    usernameSubscription.unsubscribe();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不知为啥，<strong>View.onDetachedFromWindow() 没有被调用</strong>，所以导致泄露。</p>
<p>通过调试，我意识到 <strong>View.onAttachedToWindow()并不总是被调用</strong>。如果View从来没有attached，显然它就没有detached一说了。所以，<strong>View.onFinishInflate()被调用了，但View.onAttachedToWindow()没有被调用</strong>。</p>
<p>让我们再了解一下View.onAttachedToWindow()：</p>
<ul>
<li>当一个View<strong>通过Window操作添加进其父View</strong>，onAttachedToWindow()会立即调用，如addView()</li>
<li>当一个View<strong>不是通过Window操作添加进其父View</strong>，onAttachedToWindow()会在父View attached进Window时调用</li>
</ul>
<p>我们加载一个view一般如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.my_activity);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时候，<strong>每一个在view树里面的子view都会接收到View.onFinishInflate() 回调</strong>，但不一定接收View.onAttachedToWindow() 回调。这是因为：View.onAttachedToWindow() 会在第一次遍历时被调用，有时会在Activity.onStart()后面才被调用。</p>
<p><a href="https://github.com/android/platform_frameworks_base/blob/76fdbb7/core/java/android/view/ViewRootImpl.java#L1516" target="_blank" rel="external">ViewRootImpl</a>是 onAttachedToWindow()分发的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewRootImpl</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">performTraversals</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    <span class="keyword">if</span> (mFirst) &#123;</div><div class="line">      host.dispatchAttachedToWindow(mAttachInfo, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>译者注：从源码分析来说，View.onAttachedToWindow()应该在onResume之后调用，因为第一次遍历即ViewRootImpl执行performTraversals的时机是在WindowManager.addView()之后，而WindowManager.addView()从ActivityThread源码可以得知是在handleResumeActivity()中调用的</strong></p>
<p>当然，由于知识和翻译水平有限，不排除有别的场景或者我误解了作者意思</p>
</blockquote>
<p>这就是为啥我们不能在onCreate()接收attached回调，那么在onStart() 之后呢?是否attached回调总在onCreate()后被调用？</p>
<p>并不是！我们可以从<a href="https://developer.android.com/reference/android/app/Activity.html#onCreate%28android.os.Bundle%29" target="_blank" rel="external">Activity.onCreate()</a> 文档说明中找到答案：</p>
<blockquote>
<p>You can call finish() from within this function, in which case onDestroy() will be immediately called <strong>without any of the rest of the activity lifecycle*</strong>(onStart(), onResume(), onPause(), etc) executing.</p>
</blockquote>
<p>我们曾经在onCreate()中验证Activity intent，如果intent 内容无效，立即调用finish()并发送error result。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.my_activity);</div><div class="line">    <span class="keyword">if</span> (!intentValid(getIntent()) &#123;</div><div class="line">      setResult(Activity.RESULT_CANCELED, <span class="keyword">null</span>);</div><div class="line">      finish();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>view被加载，但没有attached到window，所以不会出现detached操作。</p>
<p>这是原来的Activity lifecycle图解的简单升级版本：</p>
<p><img src="http://ww2.sinaimg.cn/large/006y8lVajw1f86a3qvrwrj30e90ifwfw.jpg" alt="activity lifecycle"></p>
<p>从上述可知，我们可以把订阅的代码移动到onAttachedToWindow()中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderView</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Authenticator authenticator;</div><div class="line">  <span class="keyword">private</span> Subscription usernameSubscription;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HeaderView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;...&#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAttachedToWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> TextView usernameView = (TextView) findViewById(R.id.username);</div><div class="line">    usernameSubscription = authenticator.username().subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String username)</span> </span>&#123;...&#125;</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    usernameSubscription.unsubscribe();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无论如何，这样实现更好：代码是对称的— onAttachedToWindow()和onDetachedFromWindow()成对出现；而且不像原来的实现，我们可以随意添加和删除View，无论多少次。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/square-corner-blog/android-leak-pattern-subscriptions-in-views-18f0860aa74c#.t4v4aoudx&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.squareup&quot;&gt;Square Register&lt;/a&gt;中，我们依赖于自定义View来构建我们的应用程序。有时，View监听某个对象的变化，但对象的生命周期往往比该View还要长。&lt;/p&gt;
&lt;p&gt;举个例子，HeaderView可能需要从一个授权验证器单例监听用户名变化。&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;FrameLayout&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Authenticator authenticator;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HeaderView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, AttributeSet attrs)&lt;/span&gt; &lt;/span&gt;&amp;#123;...&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onFinishInflate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; TextView usernameView = (TextView) findViewById(R.id.username);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    authenticator.username().subscribe(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Action1&amp;lt;String&amp;gt;() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String username)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        usernameView.setText(username);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="翻译" scheme="http://blog.adisonhyh.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Python学习笔记(一)</title>
    <link href="http://blog.adisonhyh.com/2016/09/12/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://blog.adisonhyh.com/2016/09/12/Python学习笔记-一/</id>
    <published>2016-09-11T17:07:08.000Z</published>
    <updated>2016-09-11T17:10:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python基础注意点"><a href="#Python基础注意点" class="headerlink" title="Python基础注意点"></a>Python基础注意点</h2><ol>
<li><p>字符串是以单引号<code>&#39;</code>或双引号<code>&quot;</code>括起来的任意文本，比如<code>&#39;abc&#39;</code>，<code>&quot;xyz&quot;</code>等等。</p>
</li>
<li><p>如果<code>&#39;</code>本身也是一个字符，那就可以用<code>&quot;&quot;</code>括起来，比如<code>&quot;I&#39;m OK&quot;</code>包含的字符是<code>I</code>，<code>&#39;</code>，<code>m</code>，空格，<code>O</code>，<code>K</code>这6个字符</p>
</li>
<li><p>如果字符串内部既包含<code>&#39;</code>又包含<code>&quot;</code>怎么办？可以用转义字符<code>\</code>来标识，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;I\&apos;m \&quot;OK\&quot;!&apos;</div></pre></td></tr></table></figure>
<p>表示的字符串内容是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I&apos;m &quot;OK&quot;!</div></pre></td></tr></table></figure>
</li>
<li><p>空值是Python里一个特殊的值，用<code>None</code>表示。<code>None</code>不能理解为<code>0</code>，因为<code>0</code>是有意义的，而<code>None</code>是一个特殊的空值</p>
</li>
<li><p>list与tuple</p>
<ul>
<li>list是一种有序的集合，可以随时添加和删除其中的元素，表示如<code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code></li>
<li>tuple和list非常类似，但是tuple一旦初始化就不能修改,表示如<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code></li>
</ul>
<blockquote>
<p>不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。</p>
</blockquote>
<ul>
<li><strong>只有1个元素的tuple定义时必须加一个逗号<code>,</code>，不然定义的不是tuple，是元素本身</strong></li>
</ul>
</li>
</ol>
<a id="more"></a>
<h2 id="Python函数注意点"><a href="#Python函数注意点" class="headerlink" title="Python函数注意点"></a>Python函数注意点</h2><ul>
<li><p><strong>必选参数在前，默认参数在后，否则Python的解释器会报错</strong></p>
</li>
<li><p>可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时<strong>自动组装为一个tuple</strong>，方式为<code>*args</code></p>
</li>
<li><p>而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部<strong>自动组装为一个dict</strong>，方式为<code>**kw</code></p>
</li>
<li><p>使用命名关键字参数时，要特别注意，如果没有可变参数，就<strong>必须加一个<code>*</code>作为特殊分隔符</strong>。如果缺少<code>*</code>，Python解释器将无法识别位置参数和命名关键字参数</p>
</li>
<li><p>参数定义的顺序必须是：必选参数、默认参数、可变参数、命名关键字参数和关键字参数</p>
</li>
<li><p>对于任意函数，都可以通过类似<code>func(*args, **kw)</code>的形式调用它，无论它的参数是如何定义的</p>
<p>​</p>
</li>
</ul>
<h2 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h2><ul>
<li><p>生成器</p>
<blockquote>
<p>generator:一边循环一边计算的机制</p>
</blockquote>
<ul>
<li><p>创建生成器</p>
<ol>
<li><p>把一个列表生成式的<code>[]</code>改成<code>()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>L = [x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>L</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>g</div><div class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0x1022ef630</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>如果一个函数定义中包含<code>yield</code>关键字，那么这个函数就不再是一个普通函数，而是一个generator</p>
<blockquote>
<p>generator和函数的执行流程不一样。函数是顺序执行，遇到<code>return</code>语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用<code>next()</code>的时候执行，遇到<code>yield</code>语句返回，再次执行时从上次返回的<code>yield</code>语句处继续执行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">()</span>:</span></div><div class="line">    print(<span class="string">'step 1'</span>)</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span></div><div class="line">    print(<span class="string">'step 2'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">3</span>)</div><div class="line">    print(<span class="string">'step 3'</span>)</div><div class="line">    <span class="keyword">yield</span>(<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>调用该generator时，首先要生成一个generator对象，然后用<code>next()</code>函数不断获得下一个返回值：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>o = odd()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">1</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">step <span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>next(o)</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">StopIteration</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
<li><p>迭代器</p>
<ol>
<li>凡是可作用于<code>for</code>循环的对象都是<code>Iterable</code>类型；</li>
<li>凡是可作用于<code>next()</code>函数的对象都是<code>Iterator</code>类型，它们表示一个惰性计算的序列；</li>
<li>集合数据类型如<code>list</code>、<code>dict</code>、<code>str</code>等是<code>Iterable</code>但不是<code>Iterator</code>，不过可以通过<code>iter()</code>函数获得一个<code>Iterator</code>对象</li>
</ol>
</li>
<li><p>高阶函数</p>
<blockquote>
<p>把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y, f)</span>:</span></div><div class="line">    <span class="keyword">return</span> f(x) + f(y)</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>add(<span class="number">-5</span>, <span class="number">6</span>, abs)</div><div class="line"><span class="number">11</span></div></pre></td></tr></table></figure>
</li>
<li><p>map/reduce</p>
<ul>
<li><p><code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回</p>
<p>把list所有数字转为字符串:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>list(map(str, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]))</div><div class="line">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>]</div></pre></td></tr></table></figure>
</li>
<li><p><code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算，其效果就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</div></pre></td></tr></table></figure>
<p>如把<code>str</code>转换为<code>int</code>：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">fn</span><span class="params">(x, y)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> x * <span class="number">10</span> + y</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">char2num</span><span class="params">(s)</span>:</span></div><div class="line"><span class="meta">... </span>    <span class="keyword">return</span> &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'2'</span>: <span class="number">2</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'4'</span>: <span class="number">4</span>, <span class="string">'5'</span>: <span class="number">5</span>, <span class="string">'6'</span>: <span class="number">6</span>, <span class="string">'7'</span>: <span class="number">7</span>, <span class="string">'8'</span>: <span class="number">8</span>, <span class="string">'9'</span>: <span class="number">9</span>&#125;[s]</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>reduce(fn, map(char2num, <span class="string">'13579'</span>))</div><div class="line"><span class="number">13579</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>filter</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`filter()`把传入的函数依次作用于每个元素，然后根据返回值是`True`还是`False`决定保留还是丢弃该元素</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例如，在一个list中，删掉偶数，只保留奇数，可以这么写:</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span><span class="params">(n)</span>:</span></div><div class="line">    <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">1</span></div><div class="line"></div><div class="line">list(filter(is_odd, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">15</span>]))</div><div class="line"><span class="comment"># 结果: [1, 5, 9, 15]</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list</p>
</blockquote>
</li>
<li><p>sorted</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">按绝对值大小排序：</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>sorted([<span class="number">36</span>, <span class="number">5</span>, <span class="number">-12</span>, <span class="number">9</span>, <span class="number">-21</span>], key=abs)</div><div class="line">[<span class="number">5</span>, <span class="number">9</span>, <span class="number">-12</span>, <span class="number">-21</span>, <span class="number">36</span>]</div></pre></td></tr></table></figure>
</li>
<li><p>返回函数</p>
<blockquote>
<p>一个函数可以返回一个计算结果，也可以返回一个函数</p>
<p>返回一个函数时，牢记该函数并未执行，返回函数中不要引用任何可能会变化的变量。</p>
</blockquote>
<p>闭包:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">    m=<span class="number">3</span></div><div class="line">    n=<span class="number">5</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></div><div class="line">        a=<span class="number">4</span></div><div class="line">        <span class="keyword">return</span> m+n+a</div><div class="line">    <span class="keyword">return</span> bar</div><div class="line"></div><div class="line">&gt;&gt;&gt;bar =  foo()</div><div class="line">&gt;&gt;&gt;bar()</div><div class="line"><span class="number">12</span></div></pre></td></tr></table></figure>
<p>bar在foo函数的代码块中定义。我们称bar是foo的内部函数。</p>
<p>在bar的局部作用域中可以直接访问foo局部作用域中定义的m、n变量。<br>简单的说，这种内部函数可以使用外部函数变量的行为，就叫闭包</p>
</li>
<li><p>偏函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">当函数的参数个数太多，需要简化时，使用`functools.partial`可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> functools</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1000000'</span>)</div><div class="line"><span class="number">64</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>int2(<span class="string">'1010101'</span>)</div><div class="line"><span class="number">85</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li><p>在Python中，一个.py文件就称之为一个模块（Module）</p>
</li>
<li><p>每一个包目录下面都会有一个<code>__init__.py</code>的文件，<code>__init__.py</code>本身就是一个模块，模块名为包名</p>
</li>
<li><p>类似<code>_xxx</code>和<code>__xxx</code>这样的函数或变量就是非公开的（private），不应该被直接引用，比如<code>_abc</code>，<code>__abc</code>等</p>
<blockquote>
<p>之所以我们说，private函数和变量“不应该”被直接引用，而不是“不能”被直接引用，是因为Python并没有一种方法可以完全限制访问private函数或变量，但是，从编程习惯上不应该引用private函数或变量</p>
</blockquote>
</li>
</ul>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul>
<li><p>在Python中，实例的变量名如果以<code>__</code>开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问</p>
</li>
<li><p>限制实例的属性：定义一个特殊的<code>__slots__</code>变量，来限制该class实例能添加的属性</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'age'</span>) <span class="comment"># 用tuple定义允许绑定的属性名称</span></div></pre></td></tr></table></figure>
<p>然后，我们试试：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student() <span class="comment"># 创建新的实例</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.name = <span class="string">'Michael'</span> <span class="comment"># 绑定属性'name'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.age = <span class="number">25</span> <span class="comment"># 绑定属性'age'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">99</span> <span class="comment"># 绑定属性'score'</span></div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">AttributeError: <span class="string">'Student'</span> object has no attribute <span class="string">'score'</span></div></pre></td></tr></table></figure>
</li>
<li><p>把一个getter方法变成属性，可以加上<code>@property</code>，把一个setter方法变成属性赋值可以加上<code>@score.setter</code></p>
<p>如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line"><span class="meta">    @property</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self._score</div><div class="line"></div><div class="line"><span class="meta">    @score.setter</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, int):</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must be an integer!'</span>)</div><div class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span> <span class="keyword">or</span> value &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'score must between 0 ~ 100!'</span>)</div><div class="line">        self._score = value</div></pre></td></tr></table></figure>
<p>外部调用</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = Student()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score = <span class="number">60</span> <span class="comment"># OK，实际转化为s.set_score(60)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s.score <span class="comment"># OK，实际转化为s.get_score()</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Python允许使用多重继承，这种设计通常称之为MixIn</p>
</li>
<li><p>动态创建类<code>type()</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; def fn(self, name='world'): # 先定义函数</div><div class="line">...     print('Hello, %s.' % name)</div><div class="line">...</div><div class="line">&gt;&gt;&gt; Hello = type('Hello', (object,), dict(hello=fn)) # 创建Hello class</div><div class="line">&gt;&gt;&gt; h = Hello()</div><div class="line">&gt;&gt;&gt; h.hello()</div><div class="line">Hello, world.</div><div class="line">&gt;&gt;&gt; print(type(Hello))</div><div class="line">&lt;class 'type'&gt;</div><div class="line">&gt;&gt;&gt; print(type(h))</div><div class="line">&lt;class '__main__.Hello'&gt;</div></pre></td></tr></table></figure>
<p>要创建一个class对象，<code>type()</code>函数依次传入3个参数：</p>
<ol>
<li>class的名称；</li>
<li>继承的父类集合，注意Python支持多重继承，如果只有一个父类，别忘了tuple的单元素写法；</li>
<li>class的方法名称与函数绑定，这里我们把函数<code>fn</code>绑定到方法名<code>hello</code>上。</li>
</ol>
</li>
</ul>
<h2 id="IO编程"><a href="#IO编程" class="headerlink" title="IO编程"></a>IO编程</h2><ul>
<li><p>文件读写</p>
<p>在Python中，文件读写是通过<code>open()</code>函数打开的文件对象完成的。在Python中这种对象统称为file-like Object。除了file外，还可以是内存的字节流，网络流，自定义流等等</p>
<p>使用<code>with</code>语句操作文件IO是个好习惯，它自动帮我们调用<code>close()</code>方法，如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</div><div class="line">    print(f.read())</div></pre></td></tr></table></figure>
</li>
<li><p>多进程</p>
<p>Unix/Linux操作系统提供了一个<code>fork()</code>系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是<code>fork()</code>调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p>
<p>子进程永远返回<code>0</code>，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用<code>getppid()</code>就可以拿到父进程的ID。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Python基础注意点&quot;&gt;&lt;a href=&quot;#Python基础注意点&quot; class=&quot;headerlink&quot; title=&quot;Python基础注意点&quot;&gt;&lt;/a&gt;Python基础注意点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;字符串是以单引号&lt;code&gt;&amp;#39;&lt;/code&gt;或双引号&lt;code&gt;&amp;quot;&lt;/code&gt;括起来的任意文本，比如&lt;code&gt;&amp;#39;abc&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;quot;xyz&amp;quot;&lt;/code&gt;等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果&lt;code&gt;&amp;#39;&lt;/code&gt;本身也是一个字符，那就可以用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;括起来，比如&lt;code&gt;&amp;quot;I&amp;#39;m OK&amp;quot;&lt;/code&gt;包含的字符是&lt;code&gt;I&lt;/code&gt;，&lt;code&gt;&amp;#39;&lt;/code&gt;，&lt;code&gt;m&lt;/code&gt;，空格，&lt;code&gt;O&lt;/code&gt;，&lt;code&gt;K&lt;/code&gt;这6个字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果字符串内部既包含&lt;code&gt;&amp;#39;&lt;/code&gt;又包含&lt;code&gt;&amp;quot;&lt;/code&gt;怎么办？可以用转义字符&lt;code&gt;\&lt;/code&gt;来标识，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;apos;I\&amp;apos;m \&amp;quot;OK\&amp;quot;!&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表示的字符串内容是：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;I&amp;apos;m &amp;quot;OK&amp;quot;!&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;空值是Python里一个特殊的值，用&lt;code&gt;None&lt;/code&gt;表示。&lt;code&gt;None&lt;/code&gt;不能理解为&lt;code&gt;0&lt;/code&gt;，因为&lt;code&gt;0&lt;/code&gt;是有意义的，而&lt;code&gt;None&lt;/code&gt;是一个特殊的空值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;list与tuple&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;list是一种有序的集合，可以随时添加和删除其中的元素，表示如&lt;code&gt;classmates = [&amp;#39;Michael&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Tracy&amp;#39;]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;tuple和list非常类似，但是tuple一旦初始化就不能修改,表示如&lt;code&gt;classmates = (&amp;#39;Michael&amp;#39;, &amp;#39;Bob&amp;#39;, &amp;#39;Tracy&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;只有1个元素的tuple定义时必须加一个逗号&lt;code&gt;,&lt;/code&gt;，不然定义的不是tuple，是元素本身&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://blog.adisonhyh.com/categories/Python/"/>
    
    
      <category term="Python学习笔记" scheme="http://blog.adisonhyh.com/tags/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>抓重点学Gradle</title>
    <link href="http://blog.adisonhyh.com/2016/09/06/%E6%8A%93%E9%87%8D%E7%82%B9%E5%AD%A6Gradle/"/>
    <id>http://blog.adisonhyh.com/2016/09/06/抓重点学Gradle/</id>
    <published>2016-09-05T17:29:42.000Z</published>
    <updated>2016-09-07T16:58:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上关于Gradle的教程很多，但很多都是以“面”切入— 通过大量讲解其用法及其API分类来阐述。但Gradle API使用技巧众多，API更是成千上百，臣妾记不住呀。个人深信，技术之道与练功之道是一致的，”想要旷世武功，先练内功”。本文尝试以“点”切入，阐述一下学习Gradle的门路。</p>
<h2 id="为什么使用Gradle"><a href="#为什么使用Gradle" class="headerlink" title="为什么使用Gradle"></a>为什么使用Gradle</h2><p>所谓构建，简单来说就是根据不同的输入信息，执行不同的任务，得到不同的输出的过程。而构建工具就是把这些过程自动化、管理执行不同的任务来满足不同需求。常见的构建工具有Ant、maven等。但它们都有一些缺点：</p>
<ul>
<li><p>Ant的缺点</p>
<p>依赖管理较弱，很容易变臃肿， XML作为构建脚本</p>
</li>
<li><p>Maven的缺点</p>
<p>比较精简，但限制性太多，编写插件扩展麻烦，XML作为构建脚本。</p>
</li>
</ul>
<p>而Gradle可以说是集大成者，比Ant 语法精简， 比Maven灵活，抛弃了XML的繁琐配置，极其强大的依赖管理，基于Groovy动态语言而使得自定义行为十分方便。</p>
<a id="more"></a>
<p>关于为什么使用Gradle这个问题，官方也作出了解释：</p>
<p><img src="http://ww4.sinaimg.cn/mw1024/0063dNt1jw1f7j8imyrwmj31kw0ayju4.jpg" alt="why-gradle"></p>
<p>简单翻译总结，就是使用Gradle很方便很灵活。</p>
<p>好吧，前面的都是“废话”，作为Android开发者，你不用Gradle编译试试…</p>
<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><p>要学好Gradle，最重要的是学会<strong>查文档、查文档、查文档</strong>…重要的事情说三遍！</p>
<h3 id="Groovy"><a href="#Groovy" class="headerlink" title="Groovy"></a>Groovy</h3><p>由于Gradle是基于Groovy，所以要学习Gradle，必须要掌握一定的Groovy基础。</p>
<h4 id="Groovy是什么"><a href="#Groovy是什么" class="headerlink" title="Groovy是什么"></a>Groovy是什么</h4><p>简单来说，Groovy是拓展了Java语言的一种动态语言，可以作为Java平台的脚本语言使用，拥有类似<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="external">Python</a>、<a href="https://zh.wikipedia.org/wiki/Ruby" target="_blank" rel="external">Ruby</a>和<a href="https://zh.wikipedia.org/wiki/Smalltalk" target="_blank" rel="external">Smalltalk</a>中的一些特性。</p>
<h4 id="Groovy学习"><a href="#Groovy学习" class="headerlink" title="Groovy学习"></a>Groovy学习</h4><p>当然，第一步肯定是配置环境，关于Groovy的环境搭建，具体可以参见<a href="http://www.groovy-lang.org/download.html#gvm" target="_blank" rel="external">Groovy官网</a>,特别简单，不在此重复说明。然后，创建一个test.groovy文件，里边只有一行代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println  <span class="string">"hello groovy"</span></div></pre></td></tr></table></figure>
<p>运行一下：</p>
<p> <img src="http://ww1.sinaimg.cn/mw690/0063dNt1jw1f7j8ii4hmrj30ex01saa4.jpg" alt="hello"></p>
<p><strong>是不是感觉和python好类似</strong></p>
<p>作为一门语言，Groovy是复杂的。要深入研究的话，不会比学任一语言要简单。但是作为一名普通开发者，个人觉得掌握其中一点—<strong>Closure(闭包)</strong>，足矣。</p>
<ul>
<li><p>Groovy基础</p>
<p>为啥这么说，首先，Groovy是完全兼容Java语法的，在学习前期，你完全可以使用Java语法代替Groovy语法编写Groovy程序，毕竟是Groovy程序，随着后期对于Groovy越来越熟悉，自然而然就会转回更舒服的Groovy语法；其次，Groovy语法真心不难，举几个常见的特殊语法：</p>
<ul>
<li><p>Groovy中支持动态类型，即<strong>定义变量的时候可以不指定其类型，同一个变量可以反复赋值，而且可以是不同类型的变量</strong>。这是动态语言和静态语言比较重要的区别</p>
<p>譬如，我们把上面的test.groovy修改为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">def test=2</div><div class="line">test='tt'</div><div class="line">println  "$&#123;test&#125;"</div></pre></td></tr></table></figure>
<p>运行一下：<br>  <img src="http://ww2.sinaimg.cn/mw690/0063dNt1jw1f7j8ikvqwsj30g201zwej.jpg" alt="tt"></p>
</li>
</ul>
<p>但是这种语法早在别的动态语言，如Python、Ruby中出现过了，估计不知道的程序员几乎没有吧。</p>
<ul>
<li><p>在上面例子中，最后输出的语句<code>println  &quot;${test}&quot;</code>其实包含了Groovy两个语法糖</p>
<ul>
<li>Groovy中函数调用的时候还可以不加括号</li>
<li>如果字符中有$号的话，则它会把<strong>$表达式</strong>先求值</li>
</ul>
<p>其实上述例子完全可以写成这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">def test=<span class="number">2</span></div><div class="line">test=<span class="string">'tt'</span></div><div class="line"><span class="comment">//println  "$&#123;test&#125;"</span></div><div class="line">println(test)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>还有一些别的语法，如<code>可以不用分号结尾</code>、<code>函数的返回值也可以是无类型</code>等，但这些稍微查一下<a href="http://www.groovy-lang.org/api.html" target="_blank" rel="external">GroovyAPI文档</a>或google一下就懂了,没啥技术门槛。</p>
<p>​</p>
</li>
<li><p><strong>Closure(闭包)</strong></p>
<p>说了这么多，是时候到主角—<strong>Closure(闭包)</strong>出场了。<strong>Closure(闭包)</strong>是Groovy中函数式编程的最好体现。所谓<code>函数式编程</code>跟我们熟知的<code>面向过程编程</code>、<code>面向对象编程</code>一样也是一种<a href="https://zh.wikipedia.org/wiki/%E7%BC%96%E7%A8%8B%E8%8C%83%E5%9E%8B" target="_blank" rel="external">“编程范式”</a>，也就是如何编写程序的方法论。函数式编程最鲜明的特点是<code>函数是“第一等公民“</code>，所谓<a href="https://zh.wikipedia.org/wiki/%E7%AC%AC%E4%B8%80%E9%A1%9E%E7%89%A9%E4%BB%B6" target="_blank" rel="external">“第一等公民”</a>，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</p>
<p>在Groovy中，闭包表示一段可以执行的代码块，定义如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; [closureParameters -&gt; ] statements &#125;</div></pre></td></tr></table></figure>
<p>其中，<strong>闭包必须使用花括号括起来，<code>[closureParameters -&gt; ]</code>表示闭包参数列表，可以为空，但其为空时，闭包默认会隐含一个参数<code>it</code>,<code>statements</code>是闭包需要执行的代码，最后一行代码是返回值</strong>。</p>
<p>定义好闭包后，可以通过<code>closure(参数)</code>或者<code>closure.call(参数)</code>调用</p>
<p>举个例子：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> code=&#123;<span class="number">123</span>&#125;</div><div class="line">println  code.call(<span class="number">1</span>)</div><div class="line">println  code()</div><div class="line">输出：</div><div class="line"><span class="number">123</span></div><div class="line"><span class="number">123</span></div><div class="line"></div><div class="line"><span class="keyword">def</span> add = &#123; <span class="keyword">int</span> x,y-&gt; x+y &#125; </div><div class="line">println add(<span class="number">3</span>,<span class="number">4</span>) </div><div class="line">输出：</div><div class="line"><span class="number">7</span></div><div class="line"></div><div class="line"><span class="keyword">def</span> isEven = &#123; it%<span class="number">2</span> == <span class="number">0</span> &#125;   </div><div class="line">println isEven(<span class="number">7</span>)</div><div class="line">输出：</div><div class="line"><span class="literal">false</span></div></pre></td></tr></table></figure>
<p><strong>Closure使用注意点</strong></p>
<ul>
<li><p>省略圆括号</p>
<p>在Groovy中我们要遍历一个List，一般做法是这样的：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] </div><div class="line">list.each&#123;  </div><div class="line">  println it</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>我们查一下它的API文档，是这样的</p>
<p> <img src="http://ww2.sinaimg.cn/mw1024/0063dNt1jw1f7j8im4wvqj30n70fh75t.jpg" alt="method"></p>
<p><strong>What the hell!!!</strong>完全跟上面写法对应不上呀，实际上是因为，当函数的最后一个参数是闭包的话，可以省略圆括号，所以上面完整写法应该是这样的：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">def</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] </div><div class="line">list.each(&#123;</div><div class="line">  println it</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>还是不对呀，明明是两个参数呀，怎么只传了一个。让我们查一下文档，这个方法定义在<a href="http://docs.groovy-lang.org/latest/html/api/org/codehaus/groovy/runtime/DefaultGroovyMethods.html" target="_blank" rel="external">DefaultGroovyMethods</a>中，看一下它的类说明：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">This class defines new groovy methods which appear on normal JDK classes inside the Groovy environment. Static methods are used with the first parameter being the destination class, i.e. public static String reverse(String self) provides a reverse() method for String.</div></pre></td></tr></table></figure>
<p>恍然大悟，原来这个类定义了Groovy环境下一些类支持的方法，而其中<strong>定义的静态方法第一个参数仅仅是为了标示目标类</strong>，所以是不需要传递的。</p>
</li>
</ul>
<h3 id="Gradle-1"><a href="#Gradle-1" class="headerlink" title="Gradle"></a>Gradle</h3><h4 id="Gradle是什么"><a href="#Gradle是什么" class="headerlink" title="Gradle是什么"></a>Gradle是什么</h4><p>​    Gradle是基于Groovy定义了一套DSL，所谓DSL(领域专用语言)，就是专门针对某一特定问题的计算机语言。而Gradle我们可以认为是经过“定制”的Groovy，专门用于项目构建的语言。</p>
<h4 id="Gradle学习—-Task，Project-Plugin"><a href="#Gradle学习—-Task，Project-Plugin" class="headerlink" title="Gradle学习— Task，Project,Plugin"></a>Gradle学习— <a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="external">Task</a>，<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html" target="_blank" rel="external">Project</a>,<a href="https://docs.gradle.org/current/userguide/plugins.html" target="_blank" rel="external">Plugin</a></h4><p>虽然使用Android Studio开发的话，Gradle环境在IDE会自动下载集成，但要学好Gradle，建议还是自己部署一下环境。从<a href="http://gradle.org/" target="_blank" rel="external">Gradle官网</a>下载gradle后，配置一下环境变量。Gradle的环境就搭建起来了。</p>
<p>和Groovy同理，要深入Gradle的话，要学的东西也不会少，但是作为普通的开发者，个人觉得把三个概念搞懂就可以了：<a href="https://docs.gradle.org/current/dsl/org.gradle.api.Task.html" target="_blank" rel="external">Task</a>，<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html" target="_blank" rel="external">Project</a>,<a href="https://docs.gradle.org/current/userguide/plugins.html" target="_blank" rel="external">Plugin</a></p>
<ul>
<li><p><strong>Project</strong></p>
<p>在Gradle中，每一个project，Gradle都会创建一个Project对象，并将这个对象与构建脚本相关联。也就是说，<strong>Project对象与<code>build.gradle</code>是一对一的关系</strong>，所以你在<code>build.gradle</code>写的每一个配置其实就是它对应的<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html" target="_blank" rel="external">Project</a>对象的一个方法或者一个变量值，譬如说我们配置项目依赖：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.5.0'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>它其实对应Project对象<code>void dependencies(Closure configureClosure);</code>方法。</p>
<p>从面向对象的角度去理解Gradle，是不是觉得容易多了。</p>
</li>
</ul>
<ul>
<li><p><strong>Task</strong></p>
<p>Task表示一些需要执行的构建任务，比如说lint检查任务。定义一个Task可以这样写：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task hello &lt;&lt; &#123;</div><div class="line">    println <span class="string">"hello"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来挺莫名其妙的吧,还是从面向对象角度去把上面代码还原一下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">task(<span class="string">"hello"</span>).leftShift(&#123;</div><div class="line">   println <span class="string">"hello"</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>定义一个task相当于调用了Project对象的task方法</li>
<li>任务名是task方法的参数名</li>
<li><code>&lt;&lt;</code>是Groovy的<a href="http://groovy.codehaus.org/Operator+Overloading" target="_blank" rel="external">运算符重载</a>，在Groovy中，其实就是<code>leftShift</code>方法,<code>leftShift</code>方法 等价于 <code>doLast</code>，<code>doLast</code> 是gradle提供访问task任务的一个API，类似的还有 <code>doFirst</code>，当一个task被执行的时候，可以通过 <code>doFirst</code> 和 <code>doLast</code> 向task中动态添加操作。<code>doFirst</code> /<code>doLast</code> 会在task本身被执行之前/之后才会被执行</li>
<li><code>leftShift</code>方法接收的参数是一个<code>Closure</code></li>
</ol>
<p>从上述分析可知，其实<strong>一个Task就是一个标准的Groovy函数调用</strong></p>
</li>
<li><p><strong>Plugin</strong></p>
<p>Gradle是一个框架，作为框架，它负责定义流程和规则。而具体的编译工作则是通过插件的方式来完成的。比如<strong>编译Java有Java插件，编译Groovy有Groovy插件，编译Android APP有Android APP插件，编译Android Library有Android Library插件</strong>。简单来说，插件就是一系列任务的集合，主要作用是把一些重复利用的逻辑打包，这样就可以在不同的项目中可以重复的使用。要应用插件，可以通过引入依赖的方式添加，举个例子，要引入Android APP插件，就需要在build.gradle引用Android APP插件：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()<span class="comment">//表示编译过程中依赖的仓库</span></div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">      <span class="comment">//依赖android开发的gradle插件,groupId:artifactId:version</span></div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.5.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//应用插件</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line"></div><div class="line"><span class="comment">//配置插件属性</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.test"</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">         release &#123;</div><div class="line">            minifyEnabled <span class="literal">false</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Gradle进阶—-自定义插件"><a href="#Gradle进阶—-自定义插件" class="headerlink" title="Gradle进阶— 自定义插件"></a>Gradle进阶— 自定义插件</h4><p>​    Gradle允许开发者自定义插件来实现项目一些特殊的构建需求。譬如说：动态注入代码。我们可以直接在build.gradle定义自己的插件，但一般很少这么干，毕竟插件更多是为了项目复用的。更多情况，Gradle插件是以独立插件工程的形式开发的。下面以一个简单例子来介绍一下开发一个独立Gradle插件基本步骤：</p>
<p>假设现在我们开发一个直接输出输入内容的插件：</p>
<ol>
<li><p>建立插件工程</p>
<p>由于Gradle是基于Groovy开发的，所以我们建立的必然是Groovy工程，项目目录结构如下</p>
<p> <img src="http://ww1.sinaimg.cn/mw1024/0063dNt1jw1f7j8ilmjipj309q0bngm7.jpg" alt="plugin"></p>
<p>build.gradle如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'groovy'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'maven'</span></div><div class="line">version = <span class="string">'1.0.0'</span><span class="comment">//插件version</span></div><div class="line">group = <span class="string">'com.adison.gradleplugin'</span><span class="comment">//插件groupId</span></div><div class="line">archivesBaseName = <span class="string">'TestPlugin'</span><span class="comment">//插件artifactId</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile gradleApi()<span class="comment">//gradle sdk</span></div><div class="line">    compile localGroovy()<span class="comment">//Groovy sdk</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//发布配置</span></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories.mavenDeployer &#123;</div><div class="line">      <span class="comment">//发布到本地</span></div><div class="line">        repository(<span class="string">url:</span> <span class="string">'file:repo/'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写插件</p>
<ul>
<li><p>实现Plugin接口</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test</div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin</div><div class="line"><span class="keyword">import</span> org.gradle.api.Project</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">void</span> apply(Project target) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是插件的入口类</p>
</li>
<li><p>定义输入信息扩展类</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestExtension</span> &#123;</span></div><div class="line">    String message;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>定义插件id</p>
<p>Gradle定义插件id需要建立这样一个目录结构：<strong>/resources/META-INF/gradle-plugins</strong>，然后在其底下创建一个properties文件：<code>print-message.properties</code>文件名即是插件id，也是<code>apply plugin: &#39;xxx&#39;</code>使用的名字，在文件中输入插件入口类：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">implementation-<span class="class"><span class="keyword">class</span>=<span class="title">com</span>.<span class="title">test</span>.<span class="title">TestPlugin</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>完善插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.test</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.gradle.api.Plugin</div><div class="line"><span class="keyword">import</span> org.gradle.api.Project</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTENSION_NAME = <span class="string">"printMessage"</span>;<span class="comment">//扩展别名</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">void</span> apply(Project target) &#123;</div><div class="line">      <span class="comment">//创建扩展</span></div><div class="line">   TestExtension extension=  target.extensions.create(EXTENSION_NAME,TestExtension)</div><div class="line">        target.task(<span class="string">"printMessage"</span>)&lt;&lt; &#123;</div><div class="line">            println extension.message</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
</li>
<li><p>发布插件</p>
<p>命令行执行：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean uploadArchives</div></pre></td></tr></table></figure>
<p>会在当前repo目录生成插件文件</p>
</li>
<li><p>插件使用</p>
<ul>
<li><p>插件文件导入项目，譬如导入项<code>根目录/gradleplugin</code></p>
</li>
<li><p>引入本地仓库</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        mavenCentral()</div><div class="line">        <span class="comment">//本地仓库</span></div><div class="line">        maven &#123;</div><div class="line">            url <span class="string">'gradleplugin'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.5.0'</span></div><div class="line">   		<span class="comment">//自定义插件</span></div><div class="line">        classpath <span class="string">'com.adison.gradleplugin:TestPlugin:1.0.0'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>应用插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'print-message'</span></div><div class="line">printMessage&#123;</div><div class="line">    message=<span class="string">"test"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">命令行输入：</div><div class="line">./gradlew printMessage</div><div class="line">输出：</div><div class="line">test</div></pre></td></tr></table></figure>
</li>
</ul>
<p>举这个列子只是为了描述了一下自定义Gradle插件的流程，结合Groovy和Gradle内建的Task，可以实现更复杂实用的插件。</p>
</li>
</ol>
<h2 id="Android-Gradle使用"><a href="#Android-Gradle使用" class="headerlink" title="Android Gradle使用"></a>Android Gradle使用</h2><p>从上述可以得知，Android其实就是写了两个插件：<code>com.android.application</code>和<code>com.android.library</code>,应用这两个插件就可以实现Android APP和Android Library的构建了，所以也没啥好说的，不知道怎么配置？查文档：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">Gradle Plugin User Guide</a></p>
<p>这里简单分享几个有用的经验：</p>
<ul>
<li><p>自定义模块结构</p>
<p>项目还是是Eclipse结构，想保留原有目录结构的同时导入到AS开发，可以自己手动生成build.gradle,配置项目目录结构：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line"> 	....</div><div class="line">    sourceSets &#123;</div><div class="line">        main &#123;</div><div class="line">            manifest.srcFile <span class="string">'AndroidManifest.xml'</span></div><div class="line">            java.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            resources.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            aidl.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            renderscript.srcDirs = [<span class="string">'src'</span>]</div><div class="line">            res.srcDirs = [<span class="string">'res'</span>]</div><div class="line">            assets.srcDirs = [<span class="string">'assets'</span>]</div><div class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>由于项目协作, 以及跨平台编译, 在任何时候, 你都应该使用 Gradle Wrapper 而非本机安装Gradle</p>
<ul>
<li>Gradle Wrapper是Gradle的封装。即便你的机器上没有安装Gradle，使用Gradle Wrapper也可以执行Gradle的构建工作。</li>
<li>Gradle Wrapper在项目新创建是会自动生成，使用时会自动下载对应版本的Gradle。</li>
<li>版本一致可以避免很多因为协作或跨平台的问题。</li>
</ul>
<p>Gradle Wrapper使用很简单：</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">使用gradle：</div><div class="line">gradle tasks</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">使用gradle wrapper</div><div class="line">./gradlew tasks</div></pre></td></tr></table></figure>
<ul>
<li><p>Build Variants(构建变种版本)</p>
<p><strong>Build Type + Product Flavor = Build Variant</strong>。</p>
<p>Android通过Build Variants可以很方便构建不同的版本，满足各种版本需求。</p>
<ul>
<li>Build Type: 构建类型，如debug，release，一般用于构建不同类型提供团队内部使用</li>
<li>Product Flavor : 定制类型，一般用于区分渠道打包</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    buildTypes &#123;</div><div class="line">        debug&#123;</div><div class="line">		  ...</div><div class="line">        &#125;</div><div class="line">        release &#123;</div><div class="line">           ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    productFlavors &#123;</div><div class="line">        flavor1 &#123;</div><div class="line">          ...</div><div class="line">        &#125;</div><div class="line">        flavor2 &#123;</div><div class="line">         ...</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上面配置，则会生成4个<em>Build Variant</em></p>
<ul>
<li>Flavor1 - debug</li>
<li>Flavor1 - release</li>
<li>Flavor2 - debug</li>
<li>Flavor2 - release</li>
</ul>
</li>
</ul>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>至此，相信大家对gradle已经有一定认识。我在上述并没有对一些细节展开论述，而仅仅对我个人认为比较重要的点进行了阐述，是因为我觉得对于Gradle的学习，掌握理解其重要的概念远比记住其API重要。万变不离其宗，掌握了“点”，“面”只是时间的问题。最后，再重申一句，<strong>学会查文档真很重要</strong>。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="http://www.infoq.com/cn/articles/android-in-depth-gradle" target="_blank" rel="external">http://www.infoq.com/cn/articles/android-in-depth-gradle</a></p>
<p><a href="http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/" target="_blank" rel="external">http://benweizhu.github.io/blog/2015/03/31/deep-into-gradle-in-action-6/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;网上关于Gradle的教程很多，但很多都是以“面”切入— 通过大量讲解其用法及其API分类来阐述。但Gradle API使用技巧众多，API更是成千上百，臣妾记不住呀。个人深信，技术之道与练功之道是一致的，”想要旷世武功，先练内功”。本文尝试以“点”切入，阐述一下学习Gradle的门路。&lt;/p&gt;
&lt;h2 id=&quot;为什么使用Gradle&quot;&gt;&lt;a href=&quot;#为什么使用Gradle&quot; class=&quot;headerlink&quot; title=&quot;为什么使用Gradle&quot;&gt;&lt;/a&gt;为什么使用Gradle&lt;/h2&gt;&lt;p&gt;所谓构建，简单来说就是根据不同的输入信息，执行不同的任务，得到不同的输出的过程。而构建工具就是把这些过程自动化、管理执行不同的任务来满足不同需求。常见的构建工具有Ant、maven等。但它们都有一些缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ant的缺点&lt;/p&gt;
&lt;p&gt;依赖管理较弱，很容易变臃肿， XML作为构建脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maven的缺点&lt;/p&gt;
&lt;p&gt;比较精简，但限制性太多，编写插件扩展麻烦，XML作为构建脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而Gradle可以说是集大成者，比Ant 语法精简， 比Maven灵活，抛弃了XML的繁琐配置，极其强大的依赖管理，基于Groovy动态语言而使得自定义行为十分方便。&lt;/p&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://blog.adisonhyh.com/categories/Gradle/"/>
    
    
      <category term="Gradle" scheme="http://blog.adisonhyh.com/tags/Gradle/"/>
    
      <category term="Groovy" scheme="http://blog.adisonhyh.com/tags/Groovy/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://blog.adisonhyh.com/2016/08/31/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.adisonhyh.com/2016/08/31/Git常用命令/</id>
    <published>2016-08-31T15:25:35.000Z</published>
    <updated>2016-08-31T15:32:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><ul>
<li><p>用户名，邮箱配置</p>
<ul>
<li>全局配置</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name <span class="string">"zhangsan"</span></div><div class="line">git config --<span class="keyword">global</span> user.email <span class="string">"zhangsan@163.com"</span></div></pre></td></tr></table></figure>
<ul>
<li>单独项目配置</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"zhangsan"</span></div><div class="line">git config user.email <span class="string">"zhangsan@163.com"</span></div></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>配置SSH KEY</p>
<ul>
<li>生成ssh-key</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"zhangsan@163.com"</span></div></pre></td></tr></table></figure>
<blockquote>
<p>提示输入密码，直接回车</p>
</blockquote>
<ul>
<li><p>添加ssh-key到gitlab/github</p>
<p>将~/.ssh/id_rsa.pub内容拷贝到网站对应配置SSH KEY地方</p>
</li>
<li><p>配置多个ssh-key(如有必要)</p>
<blockquote>
<p>公司使用gitlab，开源项目放在github，需要配置不同的ssh-key对应不同的环境</p>
</blockquote>
<ol>
<li><p>生成不同的ssh-key</p>
<p>如：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "youremail@yourcompany.com” -f ~/.ssh/id-rsa</div><div class="line">ssh-keygen -t rsa -C "youremail@your.com” -f ~/.ssh/github-rsa`</div></pre></td></tr></table></figure>
<p>将对应公钥内容拷贝到gitlab和github对应配置SSH KEY地方</p>
</li>
<li><p>在 ~/.ssh 目录下新建一个config文件，内容如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># gitlab</span></div><div class="line">	Host gitlab.com</div><div class="line">    HostName gitlab.com</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/id_rsa</div><div class="line"><span class="comment"># github</span></div><div class="line">	Host github.com</div><div class="line">    HostName github.com</div><div class="line">    PreferredAuthentications publickey</div><div class="line">    IdentityFile ~/.ssh/id_github_rsa</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="git初始化"><a href="#git初始化" class="headerlink" title="git初始化"></a>git初始化</h2><ul>
<li><p>在当前目录新建一个Git代码库</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
</li>
<li><p>与远程服务器关联</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin &lt;项目地址&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>克隆项目</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone &lt;项目地址&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h2><ul>
<li><p>创建分支</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -b &lt;分支名&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>查看本地所有分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
</li>
<li><p>查看所有分支(包括远程)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -a</div></pre></td></tr></table></figure>
</li>
<li><p>查看与当前分支绑定的远端分支</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -vv</div></pre></td></tr></table></figure>
</li>
<li><p>查看远端所有分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r</div></pre></td></tr></table></figure>
</li>
<li><p><strong>创建本地分支(和远端同名)并且把本地分支和远端分支绑定，然后切换到本地分支</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout -t origin/feature/optimize ：没有加-b申明本地分支名称，默认为与远端分支同名；</div><div class="line">git checkout -b &lt;branch&gt; --track &lt;remote&gt;/&lt;branch&gt; ：完全的命令格式</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete &lt;branchName&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h2><ul>
<li><p>新建标签</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a  &lt;标签名字&gt;  -m <span class="string">'附注信息'</span></div></pre></td></tr></table></figure>
</li>
<li><p><strong>把本地tag推送到远程</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin &lt;tagName&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>推送所有本地tag到远程</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --tags</div></pre></td></tr></table></figure>
</li>
<li><p>获取远程tag</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fetch origin tag &lt;tagname&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>查看远程仓库的标签</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git ls-remote --tags</div></pre></td></tr></table></figure>
</li>
<li><p>删除远程标签</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete tag &lt;tagname&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>取得 tag 对应的代码</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout tag_name</div></pre></td></tr></table></figure>
<blockquote>
<p>但是这时候 git 可能会提示你当前处于一个“detached HEAD” 状态，因为 tag 相当于是一个快照，是不能更改它的代码的，<br>如果要在 tag 代码的基础上做修改，你需要一个分支：<code>git checkout -b branch_name tag_name</code></p>
</blockquote>
</li>
</ul>
<h2 id="git代码管理"><a href="#git代码管理" class="headerlink" title="git代码管理"></a>git代码管理</h2><ul>
<li><p>增加/删除文件</p>
<ul>
<li><p>添加指定文件到暂存区</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add &lt;file1&gt; &lt;file2&gt; ...</div></pre></td></tr></table></figure>
</li>
<li><p>添加指定目录到暂存区，包括子目录</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add &lt;dir&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>添加当前目录的所有文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add .</div></pre></td></tr></table></figure>
</li>
<li><p>删除工作区文件，并且将这次删除放入暂存区</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm &lt;file1&gt; &lt;file2&gt; ...</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>代码提交</p>
<ul>
<li><p><strong>提交暂存区到仓库</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &lt;message&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>查看提交记录</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git log</div></pre></td></tr></table></figure>
</li>
<li><p>查看仓库当前的状态</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
</li>
<li><p><strong>修改提交历史</strong></p>
<blockquote>
<p>注意：需要修改提交历史的提交最好是还没推送到远端的提交，不然有可能会有意想不到的问题</p>
</blockquote>
<ul>
<li><p>修改提交的用户名和Email</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit --amend --author=<span class="string">'Your Name '</span></div><div class="line">git commit --amend --email=<span class="string">'Your email '</span></div></pre></td></tr></table></figure>
</li>
<li><p>只修改提交说明/添加新的更改</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#只修改提交说明</span></div><div class="line">git commit —amend</div><div class="line"><span class="comment">#添加新的更改</span></div><div class="line">git add new_file</div><div class="line">git commit —amend</div></pre></td></tr></table></figure>
<p>然后你就会进入文本编辑器，输入你想要的内容，保存并退出即可。</p>
</li>
<li><p>合并提交</p>
<blockquote>
<p> 不常用，但有些场景很有用，譬如：提交一些无意义的提交，希望可以合并成一个有意义的提交。具体可以参见<a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E9%87%8D%E5%86%99%E5%8E%86%E5%8F%B2" target="_blank" rel="external">Pro Git重写历史</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase –i HEAD~<span class="number">2</span></div></pre></td></tr></table></figure>
<blockquote>
<p> 修改最近二次的提交说明,运行后將第二行的 “pick” 改為 “<strong>squash</strong>“或者“s”，然后输入”:wq”退出。编辑输入新的message，然后输入”:wq”退出</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="git-高级"><a href="#git-高级" class="headerlink" title="git 高级"></a>git 高级</h2><ul>
<li><p>储藏</p>
<p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，这时你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是<code>git stash</code>命令。</p>
<p>“‘储藏”“可以获取你工作目录的中间状态——也就是<strong>你修改过的被追踪的文件和暂存的变更</strong>——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p>
<p><strong>一句话，<code>git stash</code>用于保存和恢复工作进度</strong></p>
<ul>
<li><p>保存当前的工作进度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git stash</div><div class="line">git stash save <span class="string">"message..."</span>// 这条命令实际上是第一条 `git stash` 命令的完整版</div></pre></td></tr></table></figure>
</li>
<li><p>显示工作进度列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash list//此命令显然暗示了git stash 可以多次保存工作进度，并用在恢复时候进行选择</div></pre></td></tr></table></figure>
<p>这时应该能得到类似以下列表</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">stash@&#123;<span class="number">0</span>&#125;: WIP on master: <span class="number">049</span>d078 added the index file</div><div class="line">stash@&#123;<span class="number">1</span>&#125;: WIP on master: c264051 Revert <span class="string">"added file_size"</span></div><div class="line">stash@&#123;<span class="number">2</span>&#125;: WIP on master: <span class="number">21</span>d80a5 added number to log</div></pre></td></tr></table></figure>
</li>
<li><p>恢复保存的工作进度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git stash pop &lt;stash name&gt; </div><div class="line">git stash apply &lt;stash name&gt; </div><div class="line">//pop和apply唯一区别是恢复完毕是否将工作进度从进度列表中删除，pop删除，apply不删除</div></pre></td></tr></table></figure>
<blockquote>
<p>如果不使用任何参数，会恢复最新保存的工作进度。 如果提供<stash name="">参数（来自 <code>git stash list</code> 显示的列表），则从该 <stash name=""> 对应储藏中恢复。</stash></stash></p>
</blockquote>
</li>
<li><p>删除所有储藏的进度</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash clear</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>代码回滚</p>
<ul>
<li><p>reset</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset &lt;标记&gt; &lt;commitId&gt;</div></pre></td></tr></table></figure>
<p>撤销某次提交，但是此次之后的修改都会被退回到暂存区(soft)或删除(hard)</p>
<p> reset命令有三个标记：</p>
<ul>
<li>–mixed – 默认选项。此次之后的修改都会被退回到工作目录</li>
<li>–soft – 此次之后的修改都会被退回到暂存目录，实际就是mixed之后，又做了一次git add</li>
<li>–hard – 此次之后的修改被彻底删除，暂存区和工作目录都同步到你指定的提交</li>
</ul>
</li>
<li><p>revert</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git revert &lt;commitId&gt;</div></pre></td></tr></table></figure>
<p>撤销某次提交，撤销一个提交的同时会创建一个新的提交,这是一个安全的方法，因为它不会重写提交历史</p>
</li>
<li><p>举个栗子</p>
<p>本地提交如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">commit da53a6fecc9c77861c33ab90593af5779cfe57a8</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">17</span>:<span class="number">27</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test3</div><div class="line"></div><div class="line">commit a5a534a8d08b0d986ec10c2c7f638282578f1dd1</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">32</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test2</div><div class="line"></div><div class="line">commit bed640cdd9e8ffb637061e0e954237fa2cdee494</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">12</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test1</div></pre></td></tr></table></figure>
<p>执行<code>git reset HEAD~2</code>,再执行<code>git log</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">commit bed640cdd9e8ffb637061e0e954237fa2cdee494</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug 31 17:10:12 2016 +0800</div><div class="line"></div><div class="line">    test1</div></pre></td></tr></table></figure>
<p>可以看到最近两次提交被删除了</p>
<p>如果执行<code>git revert HEAD~2</code>,再执行<code>git log</code>,那应该是这样的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">commit <span class="number">8</span>f213b31d52313f446eebe26d1757ad7c3e1ae92</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">43</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    Revert <span class="string">"test1"</span></div><div class="line"></div><div class="line">    This reverts commit bed640cdd9e8ffb637061e0e954237fa2cdee494.</div><div class="line"></div><div class="line">commit <span class="number">1</span>b0b8b46dc84dc06cd74ed3c542afe4a3a5c3527</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">24</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test3</div><div class="line"></div><div class="line">commit dbb588ae90a6e606fc83eba9b9b069a272a7be76</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">22</span>:<span class="number">15</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test2</div><div class="line"></div><div class="line">commit bed640cdd9e8ffb637061e0e954237fa2cdee494</div><div class="line">Author: adisonhyh &lt;adison5321@gmail.com&gt;</div><div class="line">Date:   Wed Aug <span class="number">31</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">12</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    test1</div></pre></td></tr></table></figure>
<p>可以看到revert在撤销一个提交的同时会创建一个新的提交，并且不会重写提交历史</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;git配置&quot;&gt;&lt;a href=&quot;#git配置&quot; class=&quot;headerlink&quot; title=&quot;git配置&quot;&gt;&lt;/a&gt;git配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用户名，邮箱配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局配置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config --&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; user.name &lt;span class=&quot;string&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; user.email &lt;span class=&quot;string&quot;&gt;&quot;zhangsan@163.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;单独项目配置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git config user.name &lt;span class=&quot;string&quot;&gt;&quot;zhangsan&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config user.email &lt;span class=&quot;string&quot;&gt;&quot;zhangsan@163.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Tools" scheme="http://blog.adisonhyh.com/categories/Tools/"/>
    
    
      <category term="Git" scheme="http://blog.adisonhyh.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>可能是最通用全面的Android studio打包jar方法</title>
    <link href="http://blog.adisonhyh.com/2016/08/27/%E5%8F%AF%E8%83%BD%E6%98%AF%E6%9C%80%E9%80%9A%E7%94%A8%E5%85%A8%E9%9D%A2%E7%9A%84Android%20studio%E6%89%93%E5%8C%85jar%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.adisonhyh.com/2016/08/27/可能是最通用全面的Android studio打包jar方法/</id>
    <published>2016-08-27T12:20:23.000Z</published>
    <updated>2016-08-28T14:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现状"><a href="#现状" class="headerlink" title="现状"></a>现状</h2><p>网上关于Android studio打包jar的教程很多，基本思路如下</p>
<ol>
<li>项目<code>build.gradle</code>中增加一个<a href="https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html" target="_blank" rel="external">Jar任务</a>,</li>
<li>指定打包路径。如下：</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">task buildJar(<span class="string">dependsOn:</span> [<span class="string">'assembleDebug'</span>], <span class="string">type:</span> Jar) &#123;</div><div class="line"></div><div class="line">   	....</div><div class="line">      </div><div class="line">    <span class="keyword">def</span> srcClassDir = [project.buildDir.absolutePath + <span class="string">"/intermediates/classes/debug"</span>];</div><div class="line">    from srcClassDir</div><div class="line">    include <span class="string">"**/*.class"</span></div><div class="line">  	....</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>这样做个人觉得有几个问题：<br><br>1. 只能给当前项目应用module打包<code>/intermediates/classes/debug</code><br>   &gt; 对于依赖的aar，如support v7，编译输出class是在<code>/intermediates/exploded-aar/</code><br>   &gt; 对于依赖的jar包，目测在<code>intermediates</code>中根本找不到<br><br>2. 不能混淆，当然你也可以在<code>build.gradle</code>写一个<a href="http://proguard.sourceforge.net/manual/gradle.html" target="_blank" rel="external">ProGuardTask</a>，具体可参见<a href="http://chaosleong.github.io/blog/2015/08/02/android-studio-shi-yong-gradle-da-bao-jar/" target="_blank" rel="external">这篇文章</a>,这里直接复制其最终生成<code>build.gradle</code>如下：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.android.build.gradle.AppPlugin</div><div class="line"><span class="keyword">import</span> com.android.build.gradle.LibraryPlugin</div><div class="line"><span class="keyword">import</span> proguard.gradle.ProGuardTask</div><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">23</span></div><div class="line">    buildToolsVersion <span class="string">"23.0.2"</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"org.chaos.demo.jar"</span></div><div class="line">        minSdkVersion <span class="number">19</span></div><div class="line">        targetSdkVersion <span class="number">22</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="literal">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</div><div class="line">&#125;</div><div class="line"><span class="comment">//dependsOn 可根据实际需要增加或更改</span></div><div class="line">task buildJar(<span class="string">dependsOn:</span> [<span class="string">'compileReleaseJavaWithJavac'</span>], <span class="string">type:</span> Jar) &#123;</div><div class="line">    appendix = <span class="string">"demo"</span></div><div class="line">    baseName = <span class="string">"androidJar"</span></div><div class="line">    version = <span class="string">"1.0.0"</span></div><div class="line">    classifier = <span class="string">"release"</span></div><div class="line">    <span class="comment">//后缀名</span></div><div class="line">    extension = <span class="string">"jar"</span></div><div class="line">    <span class="comment">//最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]</span></div><div class="line">    archiveName = <span class="string">"AndroidJarDemo.jar"</span></div><div class="line">    <span class="comment">//需打包的资源所在的路径集</span></div><div class="line">    <span class="keyword">def</span> srcClassDir = [project.buildDir.absolutePath + <span class="string">"/intermediates/classes/release"</span>];</div><div class="line">    <span class="comment">//初始化资源路径集</span></div><div class="line">    from srcClassDir</div><div class="line">    <span class="comment">//去除路径集下部分的资源</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/MainActivity.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/MainActivity\$*.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/BuildConfig.class"</span></div><div class="line"><span class="comment">//    exclude "org/chaos/demo/jar/BuildConfig\$*.class"</span></div><div class="line"><span class="comment">//    exclude "**/R.class"</span></div><div class="line"><span class="comment">//    exclude "**/R\$*.class"</span></div><div class="line">    <span class="comment">//只导入资源路径集下的部分资源</span></div><div class="line">    include <span class="string">"org/chaos/demo/jar/**/*.class"</span></div><div class="line">    <span class="comment">//注: exclude include 支持可变长参数</span></div><div class="line">&#125;</div><div class="line">task proguardJar(<span class="string">dependsOn:</span> [<span class="string">'buildJar'</span>], <span class="string">type:</span> ProGuardTask) &#123;</div><div class="line">    <span class="comment">//Android 默认的 proguard 文件</span></div><div class="line">    configuration android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>)</div><div class="line">    <span class="comment">//manifest 注册的组件对应的 proguard 文件</span></div><div class="line">    configuration project.buildDir.absolutePath + <span class="string">"/intermediates/proguard-rules/release/aapt_rules.txt"</span></div><div class="line">    configuration <span class="string">'proguard-rules.pro'</span></div><div class="line">    String inJar = buildJar.archivePath.getAbsolutePath()</div><div class="line">    <span class="comment">//输入 jar</span></div><div class="line">    injars inJar</div><div class="line">    <span class="comment">//输出 jar</span></div><div class="line">    outjars inJar.substring(<span class="number">0</span>, inJar.lastIndexOf(<span class="string">'/'</span>)) + <span class="string">"/proguard-$&#123;buildJar.archiveName&#125;"</span></div><div class="line">    <span class="comment">//设置不删除未引用的资源(类，方法等)</span></div><div class="line">    dontshrink</div><div class="line">    Plugin plugin = getPlugins().hasPlugin(AppPlugin) ?</div><div class="line">            getPlugins().findPlugin(AppPlugin) :</div><div class="line">            getPlugins().findPlugin(LibraryPlugin)</div><div class="line">    <span class="keyword">if</span> (plugin != <span class="literal">null</span>) &#123;</div><div class="line">        List&lt;String&gt; runtimeJarList</div><div class="line">        <span class="keyword">if</span> (plugin.getMetaClass().getMetaMethod(<span class="string">"getRuntimeJarList"</span>)) &#123;</div><div class="line">            runtimeJarList = plugin.getRuntimeJarList()</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (android.getMetaClass().getMetaMethod(<span class="string">"getBootClasspath"</span>)) &#123;</div><div class="line">            runtimeJarList = android.getBootClasspath()</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            runtimeJarList = plugin.getBootClasspath()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (String <span class="string">runtimeJar :</span> runtimeJarList) &#123;</div><div class="line">            <span class="comment">//给 proguard 添加 runtime</span></div><div class="line">            libraryjars(runtimeJar)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>看起来真不太舒服不是？(无意冒犯)</p>
</blockquote>
<ol>
<li>对于一个强迫症的程序员，除了代码要整洁之外，编译脚本文件<code>build.gradle</code>不整洁也不能忍</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></div><div class="line">apply <span class="string">plugin:</span> <span class="string">'jar-gradle-plugin'</span></div><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.0"</span></div><div class="line"></div><div class="line">    defaultConfig &#123;</div><div class="line">        applicationId <span class="string">"com.adison.testjarplugin"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    buildTypes &#123;</div><div class="line">        release &#123;</div><div class="line">            minifyEnabled <span class="literal">true</span></div><div class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</div><div class="line">    testCompile <span class="string">'junit:junit:4.12'</span></div><div class="line">    compile <span class="string">'com.android.support:appcompat-v7:24.0.0'</span></div><div class="line">    compile <span class="string">'com.android.support:design:24.0.0'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">BuildJar&#123;</div><div class="line">    <span class="comment">//输出目录</span></div><div class="line">    outputFileDir= project.buildDir.path+<span class="string">"/jar"</span></div><div class="line">    <span class="comment">//输出原始jar包名</span></div><div class="line">    outputFileName=<span class="string">"test.jar"</span></div><div class="line">    <span class="comment">//输出混淆jar包名</span></div><div class="line">    outputProguardFileName=<span class="string">"test_proguard.jar"</span></div><div class="line">    <span class="comment">//混淆配置</span></div><div class="line">    proguardConfigFile=<span class="string">"proguard-rules.pro"</span></div><div class="line">    <span class="comment">//是否需要默认的混淆配置proguard-android.txt</span></div><div class="line">    needDefaultProguard=<span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这样感觉是不是好些了哈</p>
</blockquote>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p>关于第一个问题，我们可以利用<a href="http://tools.android.com/tech-docs/new-build-system/transform-api" target="_blank" rel="external">Android Transform Task</a>解决，其官方说明如下：</p>
<blockquote>
<p>Starting with 1.5.0-beta1, the Gradle plugin includes a Transform API allowing 3rd party plugins to manipulate compiled class files before they are converted to dex files.(The API existed in 1.4.0-beta2 but it’s been completely revamped in 1.5.0-beta1)</p>
</blockquote>
<p>可见Transform Task的输入文件肯定包含apk所有依赖class及其本身class，我们只要取得其输入文件就行了</p>
<p>关于第三个问题，我们写一个Gradle插件，把业务逻辑都交给插件处理就好了，关于Gradle及自定义Gradle插件可以参考<a href="http://benweizhu.github.io/blog/categories/gradleshen-ru-yu-shi-zhan/" target="_blank" rel="external">Gradle深入与实战</a>系列文章，在此不展开说明。废话不多说，直接上插件代码：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuildJarPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXTENSION_NAME = <span class="string">"BuildJar"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> apply(Project project) &#123;</div><div class="line">        DefaultDomainObjectSet&lt;ApplicationVariant&gt; variants</div><div class="line">        <span class="keyword">if</span> (project.getPlugins().hasPlugin(AppPlugin)) &#123;</div><div class="line">            variants = project.android.applicationVariants;</div><div class="line">            project.extensions.create(EXTENSION_NAME, BuildJarExtension);  </div><div class="line">            applyTask(project, variants);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">void</span> applyTask(Project project, variants) &#123;</div><div class="line"></div><div class="line">        project.afterEvaluate &#123;</div><div class="line">            BuildJarExtension jarExtension = BuildJarExtension.getConfig(project);</div><div class="line">            <span class="keyword">def</span> includePackage = jarExtension.includePackage</div><div class="line">            <span class="keyword">def</span> excludeClass = jarExtension.excludeClass</div><div class="line">            <span class="keyword">def</span> excludePackage = jarExtension.excludePackage</div><div class="line">            <span class="keyword">def</span> excludeJar = jarExtension.excludeJar</div><div class="line"></div><div class="line">            variants.all &#123; variant -&gt;</div><div class="line">                <span class="keyword">if</span> (variant.name.capitalize() == <span class="string">"Debug"</span>) &#123;</div><div class="line">                    <span class="keyword">def</span> dexTask = project.tasks.findByName(BuildJarUtils.getDexTaskName(project, variant))</div><div class="line">                    <span class="keyword">if</span> (dexTask != <span class="literal">null</span>) &#123;</div><div class="line">                        <span class="keyword">def</span> buildJarBeforeDex = <span class="string">"buildJarBeforeDex$&#123;variant.name.capitalize()&#125;"</span></div><div class="line"></div><div class="line">                        <span class="keyword">def</span> buildJar = project.tasks.create(<span class="string">"buildJar"</span>, Jar)</div><div class="line">                        buildJar.setDescription(<span class="string">"构建jar包"</span>)</div><div class="line">                        Closure buildJarClosure = &#123;</div><div class="line">                            <span class="comment">//过滤R文件和BuildConfig文件</span></div><div class="line">                            buildJar.exclude(<span class="string">"**/BuildConfig.class"</span>)</div><div class="line">                            buildJar.exclude(<span class="string">"**/BuildConfig\$*.class"</span>)</div><div class="line">                            buildJar.exclude(<span class="string">"**/R.class"</span>)</div><div class="line">                            buildJar.exclude(<span class="string">"**/R\$*.class"</span>)</div><div class="line">                            buildJar.archiveName = jarExtension.outputFileName</div><div class="line">                            buildJar.destinationDir = project.file(jarExtension.outputFileDir)</div><div class="line">                            <span class="keyword">if</span> (excludeClass != <span class="literal">null</span> &amp;&amp; excludeClass.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                                excludeClass.each &#123;</div><div class="line">                                    <span class="comment">//排除指定class</span></div><div class="line">                                    buildJar.exclude(it)</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (excludePackage != <span class="literal">null</span> &amp;&amp; excludePackage.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                                excludePackage.each &#123;</div><div class="line">                                    <span class="comment">//过滤指定包名下class</span></div><div class="line">                                    buildJar.exclude(<span class="string">"$&#123;it&#125;/**/*.class"</span>)</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (includePackage != <span class="literal">null</span> &amp;&amp; includePackage.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                                includePackage.each &#123;</div><div class="line">                                    <span class="comment">//仅仅打包指定包名下class</span></div><div class="line">                                    buildJar.include(<span class="string">"$&#123;it&#125;/**/*.class"</span>)</div><div class="line">                                &#125;</div><div class="line"></div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                <span class="comment">//默认全项目构建jar</span></div><div class="line">                                buildJar.include(<span class="string">"**/*.class"</span>)</div><div class="line"></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        project.task(buildJarBeforeDex) &lt;&lt; &#123;</div><div class="line">                            Set&lt;File&gt; inputFiles = BuildJarUtils.getDexTaskInputFiles(project, variant, dexTask)</div><div class="line"></div><div class="line">                            inputFiles.each &#123; inputFile -&gt;</div><div class="line">                                <span class="keyword">def</span> path = inputFile.absolutePath</div><div class="line">                                <span class="keyword">if</span> (path.endsWith(SdkConstants.DOT_JAR) &amp;&amp; !BuildJarUtils.isExcludedJar(path, excludeJar)) &#123;</div><div class="line">                                    buildJar.from(project.zipTree(path))</div><div class="line">                                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (inputFile.isDirectory()) &#123;</div><div class="line">                                    <span class="comment">//intermediates/classes/debug</span></div><div class="line">                                    buildJar.from(inputFile)</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">def</span> buildProguardJar = project.tasks.create(<span class="string">"buildProguardJar"</span>, ProGuardTask);</div><div class="line">                        buildProguardJar.setDescription(<span class="string">"混淆jar包"</span>)</div><div class="line">                        buildProguardJar.dependsOn buildJar</div><div class="line">                        <span class="comment">//设置不删除未引用的资源(类，方法等)</span></div><div class="line">                        buildProguardJar.dontshrink();</div><div class="line">                        <span class="comment">//忽略警告</span></div><div class="line">                        buildProguardJar.ignorewarnings()</div><div class="line">                        <span class="comment">//需要被混淆的jar包</span></div><div class="line">                        buildProguardJar.injars(jarExtension.outputFileDir + <span class="string">"/"</span> + jarExtension.outputFileName)</div><div class="line">                        <span class="comment">//混淆后输出的jar包</span></div><div class="line">                        buildProguardJar.outjars(jarExtension.outputFileDir + <span class="string">"/"</span> + jarExtension.outputProguardFileName)</div><div class="line"></div><div class="line">                        <span class="comment">//libraryjars表示引用到的jar包不被混淆</span></div><div class="line">                        <span class="comment">// ANDROID PLATFORM</span></div><div class="line">                        buildProguardJar.libraryjars(project.android.getSdkDirectory().toString() + <span class="string">"/platforms/"</span> + <span class="string">"$&#123;project.android.compileSdkVersion&#125;"</span> + <span class="string">"/android.jar"</span>)</div><div class="line">                        <span class="comment">// JAVA HOME</span></div><div class="line">                        <span class="keyword">def</span> javaBase = System.properties[<span class="string">"java.home"</span>]</div><div class="line">                        <span class="keyword">def</span> javaRt = <span class="string">"/lib/rt.jar"</span></div><div class="line">                        <span class="keyword">if</span> (System.properties[<span class="string">"os.name"</span>].toString().toLowerCase().contains(<span class="string">"mac"</span>)) &#123;</div><div class="line">                            <span class="keyword">if</span> (!<span class="keyword">new</span> File(javaBase + javaRt).exists()) &#123;</div><div class="line">                                javaRt = <span class="string">"/../Classes/classes.jar"</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        buildProguardJar.libraryjars(javaBase + <span class="string">"/"</span> + javaRt)</div><div class="line">                        <span class="comment">//混淆配置文件</span></div><div class="line">                        buildProguardJar.configuration(jarExtension.proguardConfigFile)</div><div class="line">                        <span class="keyword">if</span> (jarExtension.needDefaultProguard) &#123;</div><div class="line">                            buildProguardJar.configuration(project.android.getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>))</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//applymapping</span></div><div class="line">                        <span class="keyword">def</span> applyMappingFile=jarExtension.applyMappingFile</div><div class="line">                        <span class="keyword">if</span>(applyMappingFile!=<span class="literal">null</span>)&#123;</div><div class="line">                            buildProguardJar.applymapping(applyMappingFile)</div><div class="line">                        &#125;</div><div class="line">                        <span class="comment">//输出mapping文件</span></div><div class="line">                        buildProguardJar.printmapping(jarExtension.outputFileDir + <span class="string">"/"</span> + <span class="string">"mapping.txt"</span>)</div><div class="line">                        <span class="keyword">def</span> buildJarBeforeDexTask = project.tasks[buildJarBeforeDex]</div><div class="line">                        buildJarBeforeDexTask.dependsOn dexTask.taskDependencies.getDependencies(dexTask)</div><div class="line">                        buildJar.dependsOn buildJarBeforeDexTask</div><div class="line">                        buildJar.doFirst(buildJarClosure)</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>既然标题说了这是一个通用的打包jar插件，那么一些基本特性，如<code>过滤包名</code>，<code>指定包名</code>等是必须要支持的，目前该插件支持特性如下：</p>
<ol>
<li>按需打包jar：<ul>
<li>全项目打包jar</li>
<li>指定输出Jar包的包名路径列表</li>
<li>过滤指定包名路径列表</li>
<li>过滤指定class</li>
<li>过滤指定jar</li>
</ul>
</li>
<li>支持混淆打包jar</li>
<li>支持applymapping</li>
</ol>
<h3 id="具体使用说明"><a href="#具体使用说明" class="headerlink" title="具体使用说明"></a>具体使用说明</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.1.3'</span></div><div class="line">        classpath <span class="string">'com.adison.gradleplugin:jar:1.0.1'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>应用插件</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'jar-gradle-plugin'</span></div><div class="line">BuildJar&#123;</div><div class="line">    <span class="comment">//输出目录</span></div><div class="line">    outputFileDir= project.buildDir.path+<span class="string">"/jar"</span></div><div class="line">    <span class="comment">//输出原始jar包名</span></div><div class="line">    outputFileName=<span class="string">"test.jar"</span></div><div class="line">    <span class="comment">//输出混淆jar包名</span></div><div class="line">    outputProguardFileName=<span class="string">"test_proguard.jar"</span></div><div class="line">    <span class="comment">//混淆配置</span></div><div class="line">    proguardConfigFile=<span class="string">"proguard-rules.pro"</span></div><div class="line">    <span class="comment">//是否需要默认的混淆配置proguard-android.txt</span></div><div class="line">    needDefaultProguard=<span class="literal">true</span></div><div class="line">    applyMappingFile=<span class="string">"originMapping/mapping.txt"</span></div><div class="line">    <span class="comment">//需要输出jar的包名列表,当此参数为空时，则默认全项目输出,支持多包,如 includePackage=['com/adison/testjarplugin/include','com/adison/testjarplugin/include1'...]</span></div><div class="line">    includePackage=[<span class="string">'com/adison/testjarplugin/include'</span>]</div><div class="line">    <span class="comment">//不需要输出jar的jar包列表,如['baidu.jar','baidu1.jar'...]</span></div><div class="line">    excludeJar=[]</div><div class="line">    <span class="comment">//不需要输出jar的类名列表,如['baidu.calss','baidu1.class'...]</span></div><div class="line">    excludeClass=[<span class="string">'com/adison/testjarplugin/TestExcude.class'</span>]</div><div class="line">    <span class="comment">//不需要输出jar的包名列表,如 excludePackage=['com/adison/testjarplugin/exclude','com/adison/testjarplugin/exclude1'...]</span></div><div class="line">    excludePackage=[<span class="string">'com/adison/testjarplugin/exclude'</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用</p>
</li>
</ol>
<ul>
<li><p>打包普通jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildJar</div></pre></td></tr></table></figure>
</li>
<li><p>打包混淆jar</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew buildProguardJar</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>使用可参见<a href="https://github.com/adisonhyh/TestJarPlugin" target="_blank" rel="external">使用demo</a></p>
</blockquote>
<h2 id="插件源码"><a href="#插件源码" class="headerlink" title="插件源码"></a>插件源码</h2><p> <a href="https://github.com/adisonhyh/buildJar" target="_blank" rel="external">https://github.com/adisonhyh/buildJar</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现状&quot;&gt;&lt;a href=&quot;#现状&quot; class=&quot;headerlink&quot; title=&quot;现状&quot;&gt;&lt;/a&gt;现状&lt;/h2&gt;&lt;p&gt;网上关于Android studio打包jar的教程很多，基本思路如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;项目&lt;code&gt;build.gradle&lt;/code&gt;中增加一个&lt;a href=&quot;https://docs.gradle.org/current/dsl/org.gradle.api.tasks.bundling.Jar.html&quot;&gt;Jar任务&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;指定打包路径。如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;task buildJar(&lt;span class=&quot;string&quot;&gt;dependsOn:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&#39;assembleDebug&#39;&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;type:&lt;/span&gt; Jar) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   	....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; srcClassDir = [project.buildDir.absolutePath + &lt;span class=&quot;string&quot;&gt;&quot;/intermediates/classes/debug&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    from srcClassDir&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    include &lt;span class=&quot;string&quot;&gt;&quot;**/*.class&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	....&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Gradle" scheme="http://blog.adisonhyh.com/categories/Gradle/"/>
    
    
      <category term="gradle插件" scheme="http://blog.adisonhyh.com/tags/gradle%E6%8F%92%E4%BB%B6/"/>
    
      <category term="打包jar" scheme="http://blog.adisonhyh.com/tags/%E6%89%93%E5%8C%85jar/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解java虚拟机》阅读笔记</title>
    <link href="http://blog.adisonhyh.com/2016/08/20/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E3%80%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.adisonhyh.com/2016/08/20/《深入理解java虚拟机》阅读笔记/</id>
    <published>2016-08-19T21:20:10.000Z</published>
    <updated>2016-08-20T15:06:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-运行时数据区域"><a href="#1-运行时数据区域" class="headerlink" title="1.运行时数据区域"></a>1.运行时数据区域</h3><p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。<a id="more"></a>根据《Java虚拟机规范（Java SE 7版）》的规定，Java虚拟机所管理的内存将会包括以下几个运行时数据区域，如图所示。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zs6drlusj31g814sthk.jpg" alt="运行时数据区域"></p>
<h4 id="1-1-程序计数器"><a href="#1-1-程序计数器" class="headerlink" title="1.1. 程序计数器"></a>1.1. 程序计数器</h4><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。</p>
<p>此内存区域是唯一一个在Java虚拟机规范中没有规定任何OutOfMemoryError情况的区域。</p>
<h4 id="1-2-Java虚拟机栈"><a href="#1-2-Java虚拟机栈" class="headerlink" title="1.2. Java虚拟机栈"></a>1.2. Java虚拟机栈</h4><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame[1]）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p>
<p>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p>
<h4 id="1-3-本地方法栈"><a href="#1-3-本地方法栈" class="headerlink" title="1.3.本地方法栈"></a>1.3.本地方法栈</h4><p>本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p>
<p>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError和OutOfMemoryError异常。</p>
<h4 id="1-4-Java堆"><a href="#1-4-Java堆" class="headerlink" title="1.4.Java堆"></a>1.4.Java堆</h4><p>对于大多数应用来说，Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。</p>
<h4 id="1-5-方法区"><a href="#1-5-方法区" class="headerlink" title="1.5.方法区"></a>1.5.方法区</h4><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<h4 id="1-6-运行时常量池"><a href="#1-6-运行时常量池" class="headerlink" title="1.6.运行时常量池"></a>1.6.运行时常量池</h4><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>
<h3 id="2-虚拟机对象探秘"><a href="#2-虚拟机对象探秘" class="headerlink" title="2. 虚拟机对象探秘"></a>2. 虚拟机对象探秘</h3><h4 id="2-1-对象的创建"><a href="#2-1-对象的创建" class="headerlink" title="2.1. 对象的创建"></a>2.1. 对象的创建</h4><p>对象所需内存的大小在类加载完成后便可以完全确定。</p>
<h4 id="2-2-对象的访问定位"><a href="#2-2-对象的访问定位" class="headerlink" title="2.2. 对象的访问定位"></a>2.2. 对象的访问定位</h4><p>目前主流的访问方式有使用句柄和直接指针两种。</p>
<p>如果使用句柄访问的话，那么Java堆中将会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自的具体地址信息，如图所示。</p>
<p><img src="http://ww4.sinaimg.cn/mw690/0063dNt1jw1f6zs6quu0qj31kw0qxjwa.jpg" alt="句柄访问"></p>
<p>如果使用直接指针访问，那么Java堆对象的布局中就必须考虑如何放置访问类型数据的相关信息，而reference中存储的直接就是对象地址，如图所示。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zs6rjpsjj31kw0s842x.jpg" alt="指针访问"></p>
<p>这两种对象访问方式各有优势，使用句柄来访问的最大好处就是reference中存储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要修改。</p>
<p>使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开销，由于对象的访问在Java中非常频繁，因此这类开销积少成多后也是一项非常可观的执行成本。就虚拟机Sun HotSpot而言，它是使用第二种方式进行对象访问的。</p>
<h3 id="3-垃圾收集器与内存分配策略"><a href="#3-垃圾收集器与内存分配策略" class="headerlink" title="3. 垃圾收集器与内存分配策略"></a>3. 垃圾收集器与内存分配策略</h3><h4 id="3-1-对象已死吗"><a href="#3-1-对象已死吗" class="headerlink" title="3.1.对象已死吗"></a>3.1.对象已死吗</h4><ul>
<li><p>引用计数算法</p>
<p>很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<blockquote>
<p>它很难解决对象之间相互循环引用的问题。</p>
</blockquote>
</li>
<li><p>可达性分析算法</p>
<p>这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说，就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。</p>
<p>在Java语言中，可作为GC Roots的对象包括下面几种：</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。</li>
</ul>
</li>
</ul>
<ul>
<li>方法区中类静态属性引用的对象。</li>
</ul>
<ul>
<li>方法区中常量引用的对象。</li>
</ul>
<ul>
<li>本地方法栈中JNI（即一般说的Native方法）引用的对象。</li>
</ul>
<h4 id="3-2-生存还是死亡"><a href="#3-2-生存还是死亡" class="headerlink" title="3.2. 生存还是死亡"></a>3.2. 生存还是死亡</h4><p>即使在可达性分析算法中不可达的对象，也并非是“非死不可”的，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记并且进行一次筛选，筛选的条件是此对象是否有必要执行finalize（）方法。当对象没有覆盖finalize（）方法，或者finalize（）方法已经被虚拟机调用过，虚拟机将这两种情况都视为“没有必要执行”。</p>
<p>如果这个对象被判定为有必要执行finalize（）方法，那么这个对象将会放置在一个叫做F-Queue的队列之中，并在稍后由一个由虚拟机自动建立的、低优先级的Finalizer线程去执行它。这里所谓的“执行”是指虚拟机会触发这个方法，但并不承诺会等待它运行结束，这样做的原因是，如果一个对象在finalize（）方法中执行缓慢，或者发生了死循环（更极端的情况），将很可能会导致F-Queue队列中其他对象永久处于等待，甚至导致整个内存回收系统崩溃。finalize（）方法是对象逃脱死亡命运的最后一次机会，稍后GC将对F-Queue中的对象进行第二次小规模的标记，如果对象要在finalize（）中成功拯救自己——只要重新与引用链上的任何一个对象建立关联即可，譬如把自己（this关键字）赋值给某个类变量或者对象的成员变量，那在第二次标记时它将被移除出“即将回收”的集合；如果对象这时候还没有逃脱，那基本上它就真的被回收了。</p>
<p>建议大家尽量避免使用它，因为它不是C/C++中的析构函数，而是Java刚诞生时为了使C/C++程序员更容易接受它所做出的一个妥协。它的运行代价高昂，不确定性大，无法保证各个对象的调用顺序。</p>
<h4 id="3-3-无用的类"><a href="#3-3-无用的类" class="headerlink" title="3.3.无用的类"></a>3.3.无用的类</h4><p>类需要同时满足下面3个条件才能算是“无用的类”：</p>
<ul>
<li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li>
</ul>
<ul>
<li>加载该类的ClassLoader已经被回收。</li>
</ul>
<ul>
<li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li>
</ul>
<h4 id="3-4-垃圾收集算法"><a href="#3-4-垃圾收集算法" class="headerlink" title="3.4.垃圾收集算法"></a>3.4.垃圾收集算法</h4><blockquote>
<p>当前商业虚拟机的垃圾收集都采用“分代收集”（Generational Collection）算法，这种算法并没有什么新的思想，只是根据对象存活周期的不同将内存划分为几块。一般是把Java堆分为新生代和老年代，这样就可以根据各个年代的特点采用最适当的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，那就选用复制算法，只需要付出少量存活对象的复制成本就可以完成收集。而老年代中因为对象存活率高、没有额外空间对它进行分配担保，就必须使用“标记—清理”或者“标记—整理”算法来进行回收。</p>
</blockquote>
<h5 id="3-4-1-标记-清除算法"><a href="#3-4-1-标记-清除算法" class="headerlink" title="3.4.1.标记-清除算法"></a>3.4.1.标记-清除算法</h5><p>如同它的名字一样，算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。它的主要不足有两个：一个是效率问题，标记和清除两个过程的效率都不高；另一个是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。标记—清除算法的执行过程如图所示。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/0063dNt1jw1f6zs6v0nebj31ew0yy783.jpg" alt="标记-清除算法"></p>
<h5 id="3-4-2-复制算法"><a href="#3-4-2-复制算法" class="headerlink" title="3.4.2.复制算法"></a>3.4.2.复制算法</h5><p>为了解决效率问题，一种称为“复制”（Copying）的收集算法出现了，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。只是这种算法的代价是将内存缩小为了原来的一半，未免太高了一点。复制算法的执行过程如图所示。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zs6vpduzj31e20yyadz.jpg" alt="复制算法"></p>
<p>现在的商业虚拟机都采用这种收集算法来回收新生代，IBM公司的专门研究表明，新生代中的对象98%是“朝生夕死”的，所以并不需要按照1:1的比例来划分内存空间，而是将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。当然，98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）</p>
<blockquote>
<p>分配担保:如果另外一块Survivor空间没有足够空间存放上一次新生代收集下来的存活对象时，这些对象将直接通过分配担保机制进入老年代。</p>
</blockquote>
<h5 id="3-4-3-标记-整理算法"><a href="#3-4-3-标记-整理算法" class="headerlink" title="3.4.3.标记-整理算法"></a>3.4.3.标记-整理算法</h5><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存，“标记-整理”算法的示意图如图所示。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/0063dNt1jw1f6zs6wfrvxj31bm0x2n0p.jpg" alt="标记-整理算法"></p>
<h4 id="3-5-内存分配规则"><a href="#3-5-内存分配规则" class="headerlink" title="3.5.内存分配规则"></a>3.5.内存分配规则</h4><h5 id="3-5-1-对象优先在Eden分配"><a href="#3-5-1-对象优先在Eden分配" class="headerlink" title="3.5.1.对象优先在Eden分配"></a>3.5.1.对象优先在Eden分配</h5><p>大多数情况下，对象在新生代Eden区中分配。当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC。</p>
<ul>
<li><p>新生代GC（Minor GC）</p>
<p>指发生在新生代的垃圾收集动作，因为Java对象大多都具备朝生夕灭的特性，所以Minor GC非常频繁，一般回收速度也比较快。</p>
</li>
</ul>
<ul>
<li><p>老年代GC（Major GC/Full GC）</p>
<p>指发生在老年代的GC，出现了Major GC，经常会伴随至少一次的Minor GC。Major GC的速度一般会比Minor GC慢10倍以上。 </p>
</li>
</ul>
<h5 id="3-5-2-大对象直接进入老年代"><a href="#3-5-2-大对象直接进入老年代" class="headerlink" title="3.5.2.大对象直接进入老年代"></a>3.5.2.大对象直接进入老年代</h5><p>所谓的大对象是指，需要大量连续内存空间的Java对象，最典型的大对象就是那种很长的字符串以及数组。大对象对虚拟机的内存分配来说就是一个坏消息，经常出现大对象容易导致内存还有不少空间时就提前触发垃圾收集以获取足够的连续空间来“安置”它们。</p>
<h5 id="3-5-3-长期存活的对象将进入老年代"><a href="#3-5-3-长期存活的对象将进入老年代" class="headerlink" title="3.5.3.长期存活的对象将进入老年代"></a>3.5.3.长期存活的对象将进入老年代</h5><p>既然虚拟机采用了分代收集的思想来管理内存，那么内存回收时就必须能识别哪些对象应放在新生代，哪些对象应放在老年代中。为了做到这点，虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在Eden出生并经过第一次Minor GC后仍然存活，并且能被Survivor容纳的话，将被移动到Survivor空间中，并且对象年龄设为1。对象在Survivor区中每“熬过”一次Minor GC，年龄就增加1岁，当它的年龄增加到一定程度（默认为15岁），就将会被晋升到老年代中。</p>
<h5 id="3-5-4-动态对象年龄判定"><a href="#3-5-4-动态对象年龄判定" class="headerlink" title="3.5.4.动态对象年龄判定"></a>3.5.4.动态对象年龄判定</h5><p>为了能更好地适应不同程序的内存状况，虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到MaxTenuringThreshold中要求的年龄。</p>
<h5 id="3-5-5-空间分配担保"><a href="#3-5-5-空间分配担保" class="headerlink" title="3.5.5.空间分配担保"></a>3.5.5.空间分配担保</h5><p>在发生Minor GC之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象总空间，如果这个条件成立，那么Minor GC可以确保是安全的。如果不成立，则虚拟机会查看HandlePromotionFailure设置值是否允许担保失败。如果允许，那么会继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小，如果大于，将尝试着进行一次Minor GC，尽管这次Minor GC是有风险的；如果小于，或者HandlePromotionFailure设置不允许冒险，那这时也要改为进行一次Full GC。</p>
<h3 id="4-虚拟机类加载机制"><a href="#4-虚拟机类加载机制" class="headerlink" title="4.虚拟机类加载机制"></a>4.虚拟机类加载机制</h3><blockquote>
<p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>
</blockquote>
<h4 id="4-1-类的生命周期"><a href="#4-1-类的生命周期" class="headerlink" title="4.1.类的生命周期"></a>4.1.类的生命周期</h4><p> 类从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7个阶段。其中验证、准备、解析3个部分统称为连接（Linking），这7个阶段的发生顺序如图所示。 </p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zs6xdztjj31kw0m978d.jpg" alt="类的生命周期"></p>
<h4 id="4-2-类加载器"><a href="#4-2-类加载器" class="headerlink" title="4.2.类加载器"></a>4.2.类加载器</h4><p>对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。</p>
<h5 id="4-2-1-双亲委派模型"><a href="#4-2-1-双亲委派模型" class="headerlink" title="4.2.1.双亲委派模型"></a>4.2.1.双亲委派模型</h5><p>绝大部分Java程序都会使用到以下3种系统提供的类加载器:</p>
<ul>
<li><p>启动类加载器（Bootstrap ClassLoader）</p>
<p>这个类将器负责将存放在＜JAVA_HOME＞\lib目录中的，或者被-Xbootclasspath参数所指定的路径中的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机内存中。启动类加载器无法被Java程序直接引用，用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器，那直接使用null代替即可。</p>
</li>
<li><p>扩展类加载器（Extension ClassLoader）</p>
<p>这个加载器由sun.misc.Launcher $ExtClassLoader实现，它负责加载＜JAVA_HOME＞\lib\ext目录中的，或者被java.ext.dirs系统变量所指定的路径中的所有类库，开发者可以直接使用扩展类加载器。</p>
</li>
<li><p>应用程序类加载器（Application ClassLoader）</p>
<p>这个类加载器由sun.misc.Launcher $App-ClassLoader实现。由于这个类加载器是ClassLoader中的getSystemClassLoader（）方法的返回值，所以一般也称它为系统类加载器。它负责加载用“户类路径（ClassPath）上所指定的类库，开发者可以直接使用这个类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</p>
</li>
</ul>
<p>我们的应用程序都是由这3种类加载器互相配合进行加载的，如果有必要，还可以加入自己定义的类加载器。这些类加载器之间的关系一般如图所示。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/0063dNt1jw1f6zs6yx6eij3148160q8e.jpg" alt="双亲委派模型"></p>
<p>上图中展示的类加载器之间的这种层次关系，称为类加载器的双亲委派模型（Parents Delegation Model）。双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应当有自己的父类加载器。这里类加载器之间的父子关系一般不会以继承（Inheritance）的关系来实现，而是都使用组合（Composition）关系来复用父加载器的代码。</p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>
<h3 id="5-Java内存模型与线程"><a href="#5-Java内存模型与线程" class="headerlink" title="5.Java内存模型与线程"></a>5.Java内存模型与线程</h3><h4 id="5-1-主内存与工作内存"><a href="#5-1-主内存与工作内存" class="headerlink" title="5.1.主内存与工作内存"></a>5.1.主内存与工作内存</h4><p>Java内存模型规定了所有的变量都存储在主内存（Main Memory）中（虚拟机内存的一部分）。每条线程还有自己的工作内存（Working Memory），线程的工作内存中保存了被该线程使用到的变量的主内存副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成，线程、主内存、工作内存三者的交互关系如图所示。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zs708ki0j31kw0s2jw6.jpg" alt="主内存与工作内存"></p>
<h4 id="5-2-内存间交互操作"><a href="#5-2-内存间交互操作" class="headerlink" title="5.2.内存间交互操作"></a>5.2.内存间交互操作</h4><p>关于主内存与工作内存之间具体的交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步回主内存之类的实现细节，Java内存模型中定义了以下8种操作来完成，虚拟机实现时必须保证下面提及的每一种操作都是原子的、不可再分的。</p>
<ul>
<li><p>lock（锁定）</p>
<p>作用于主内存的变量，它把一个变量标识为一条线程独占的状态。</p>
</li>
</ul>
<ul>
<li><p>unlock（解锁）</p>
<p>作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。</p>
</li>
</ul>
<ul>
<li><p>read（读取）</p>
<p>作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。</p>
</li>
</ul>
<ul>
<li><p>load（载入）</p>
<p>作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。</p>
</li>
</ul>
<ul>
<li><p>use（使用）</p>
<p>作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用到变量的值的字节码指令时将会执行这个操作。</p>
</li>
<li><p>assign（赋值）</p>
<p>作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</p>
</li>
<li><p>store（存储）</p>
<p>作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。</p>
</li>
<li><p>write（写入）</p>
<p>作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。</p>
</li>
</ul>
<p><strong>Java内存模型还规定了在执行上述8种基本操作时必须满足如下规则：</strong></p>
<ul>
<li>不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者从工作内存发起回写了但主内存不接受的情况出现。</li>
<li>不允许一个线程丢弃它的最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。</li>
<li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中</li>
<li>一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量，换句话说，就是对一个变量实施use、store操作之前，必须先执行过了assign和load操作。</li>
<li>一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。</li>
<li>如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作初始化变量的值。</li>
<li>如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定住的变量。</li>
<li>对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。</li>
</ul>
<h4 id="5-3-对于volatile型变量的特殊规则"><a href="#5-3-对于volatile型变量的特殊规则" class="headerlink" title="5.3.对于volatile型变量的特殊规则"></a>5.3.对于volatile型变量的特殊规则</h4><blockquote>
<p>关键字volatile可以说是Java虚拟机提供的最轻量级的同步机制，但是它并不容易完全被正确、完整地理解，以至于许多程序员都习惯不去使用它，遇到需要处理多线程数据竞争问题的时候一律使用synchronized来进行同步。</p>
</blockquote>
<p>当一个变量定义为volatile之后，它将具备两种特性:</p>
<ul>
<li><p>保证此变量对所有线程的可见性</p>
<p>这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量不能做到这一点，普通变量的值在线程间传递均需要通过主内存来完成。</p>
<p>由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized或java.util.concurrent中的原子类）来保证原子性。</p>
<ul>
<li>运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。</li>
<li>变量不需要与其他的状态变量共同参与不变约束。</li>
</ul>
</li>
<li><p>禁止指令重排序优化</p>
<p>普通的变量仅仅会保证在该方法的执行过程中所有依赖赋值结果的地方都能获取到正确的结果，而不能保证变量赋值操作的顺序与程序代码中的执行顺序一致。因为在一个线程的方法执行过程中无法感知到这点，这也就是Java内存模型中描述的所谓的“线程内表现为串行的语义。</p>
</li>
</ul>
<p>####5.4.原子性、可见性与有序性</p>
<p>Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这3个特征来建立的，我们逐个来看一下哪些操作实现了这3个特性。</p>
<ul>
<li><p>原子性（Atomicity</p>
<p>由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write，我们大致可以认为基本数据类型的访问读写是具备原子性的。如果应用场景需要一个更大范围的原子性保证（经常会遇到），Java内存模型还提供了lock和unlock操作来满足这种需求，尽管虚拟机未把lock和unlock操作直接开放给用户使用，但是却提供了更高层次的字节码指令monitorenter和monitorexit来隐式地使用这两个操作，这两个字节码指令反映到Java代码中就是同步块——synchronized关键字，因此在synchronized块之间的操作也具备原子性。</p>
</li>
<li><p>可见性（Visibility）</p>
<p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。上文在讲解volatile变量的时候我们已详细讨论过这一点。Java内存模型是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是volatile变量都是如此，普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。</p>
<p>除了volatile之外，Java还有两个关键字能实现可见性，即synchronized和final。同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的，而final关键字的可见性是指：被final修饰的字段在构造器中一旦初始化完成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那在其他线程中就能看见final字段的值。</p>
</li>
<li><p>有序性（Ordering）</p>
<p>Java内存模型的有序性在前面讲解volatile时也详细地讨论过了，Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内表现为串行的语义”（Within-Thread As-If-Serial Semantics），后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。</p>
<p>Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这条规则决定了持有同一个锁的两个同步块只能串行地进入。</p>
<blockquote>
<p>synchronized注意：首先，synchronized同步块对同一条线程来说是可重入的，不会出现自己把自己锁死的问题。其次，同步块在已进入的线程执行完之前，会阻塞后面其他线程的进入。第12章讲过，Java的线程是映射到操作系统的原生线程之上的，如果要阻塞或唤醒一个线程，都需要操作系统来帮忙完成，这就需要从用户态转换到核心态中，因此状态转换需要耗费很多的处理器时间。对于代码简单的同步块（如被synchronized修饰的getter（）或setter（）方法），状态转换消耗的时间有可能比用户代码执行的时间还要长。所以synchronized是Java语言中一个重量级（Heavyweight）的操作，有经验的程序员都会在确实必要的情况下才使用这种操作。而虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，避免频繁地切入到核心态之中。</p>
</blockquote>
</li>
</ul>
<h4 id="5-5-先行发生原则"><a href="#5-5-先行发生原则" class="headerlink" title="5.5.先行发生原则"></a>5.5.先行发生原则</h4><p>如果Java内存模型中所有的有序性都仅仅靠volatile和synchronized来完成，那么有一些操作将会变得很烦琐，但是我们在编写Java并发代码的时候并没有感觉到这一点，这是因为Java语言中有一个“先行发生”（happens-before）的原则。这个原则非常重要，它是判断数据是否存在竞争、线程是否安全的主要依据，依靠这个原则，我们可以通过几条规则一揽子地解决并发环境下两个操作之间是否可能存在冲突的所有问题。</p>
<p>先行发生是Java内存模型中定义的两项操作之间的偏序关系，如果说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。</p>
<p>“天然的”先行发生关系:</p>
<ul>
<li><p>程序次序规则（Program Order Rule）</p>
<p>在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。准确地说，应该是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。</p>
</li>
<li><p>管程锁定规则（Monitor Lock Rule）</p>
<p>一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是同一个锁，而“后面”是指时间上的先后顺序。</p>
</li>
<li><p>volatile变量规则（Volatile Variable Rule）</p>
<p>对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后顺序。</p>
</li>
<li><p>线程启动规则（Thread Start Rule）</p>
<p>Thread对象的start（）方法先行发生于此线程的每一个动作。</p>
</li>
<li><p>线程终止规则（Thread Termination Rule）</p>
<p>线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread.join（）方法结束、Thread.isAlive（）的返回值等手段检测到线程已经终止执行。</p>
</li>
<li><p>线程中断规则（Thread Interruption Rule）</p>
<p>对线程interrupt（）方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted（）方法检测到是否有中断发生。</p>
</li>
<li><p>对象终结规则（Finalizer Rule）</p>
<p>一个对象的初始化完成（构造函数执行结束）先行发生于它的finalize（）方法的开始。</p>
</li>
<li><p>传递性（Transitivity)</p>
<p>如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。</p>
<blockquote>
<p>时间先后顺序与先行发生原则之间基本没有太大的关系，所以我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准。</p>
</blockquote>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-运行时数据区域&quot;&gt;&lt;a href=&quot;#1-运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;1.运行时数据区域&quot;&gt;&lt;/a&gt;1.运行时数据区域&lt;/h3&gt;&lt;p&gt;Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同的数据区域，这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。
    
    </summary>
    
      <category term="阅读笔记" scheme="http://blog.adisonhyh.com/categories/%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="java" scheme="http://blog.adisonhyh.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Android 调试技巧</title>
    <link href="http://blog.adisonhyh.com/2016/08/20/Android-%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>http://blog.adisonhyh.com/2016/08/20/Android-调试技巧/</id>
    <published>2016-08-19T21:18:07.000Z</published>
    <updated>2016-08-20T15:05:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名码农，代码调试是一项不可或缺的工作，过程中总能发现一下能提高效率、有用的小技巧，此文特总结一些工作用到的一些调试技巧。</p>
<a id="more"></a>
<h3 id="Debug技巧"><a href="#Debug技巧" class="headerlink" title="Debug技巧"></a>Debug技巧</h3><p>断点debug大家都会使用，但除了单步调试之外，用过条件断点，日志断点么，一些很有用的debug技巧或许你不知道。。</p>
<ul>
<li>临时断点</li>
</ul>
<p>顾名思义，临时性断点，在第一次触发后会自动被移除</p>
<p><img src="http://ww4.sinaimg.cn/bmiddle/0063dNt1jw1f01v51zx0cj30dc08yq3i.jpg" alt="临时断点"></p>
<blockquote>
<p>触发键：Alt + 鼠标左键</p>
</blockquote>
<ul>
<li>禁用断点</li>
</ul>
<p>当你需要临时禁用一些断点，但不想下一次再重新创建这些断点的时候有用</p>
<p><img src="http://ww4.sinaimg.cn/bmiddle/0063dNt1jw1f01ve33xztj30k807475a.jpg" alt="禁用断点"></p>
<blockquote>
<p>触发键：Alt + 鼠标左键</p>
</blockquote>
<ul>
<li>计算表达式</li>
</ul>
<p>当你需要临时改变某个变量的值或者查看其内部方法返回值时很有用</p>
<p><img src="http://ww3.sinaimg.cn/bmiddle/0063dNt1gw1f01vm1upudj30ta0t4dha.jpg" alt="计算表达式"></p>
<blockquote>
<p>触发键：Alt + F8</p>
</blockquote>
<ul>
<li>计算表达式</li>
</ul>
<p>当你需要临时改变某个变量的值或者查看其内部方法返回值时很有用</p>
<p><img src="http://ww3.sinaimg.cn/bmiddle/0063dNt1gw1f01vm1upudj30ta0t4dha.jpg" alt="计算表达式"></p>
<blockquote>
<p>触发键：Alt + F8</p>
</blockquote>
<ul>
<li>检查表达式</li>
</ul>
<p>不需要打开表达式计算框就可以看到计算结果</p>
<p><img src="http://ww3.sinaimg.cn/bmiddle/0063dNt1jw1f01vyfr1e4j30t204kwfp.jpg" alt="检查表达式"></p>
<blockquote>
<p>触发键： 选中表达式，Alt + 鼠标左键</p>
</blockquote>
<ul>
<li>条件断点</li>
</ul>
<p>在特定条件下才断点</p>
<p><img src="http://ww3.sinaimg.cn/bmiddle/0063dNt1jw1f01w5s68plj30py0a63zo.jpg" alt="条件断点"></p>
<blockquote>
<p>触发键：鼠标右键点击断点</p>
</blockquote>
<ul>
<li>日志断点</li>
</ul>
<p>厌倦了每次输出一个log都得重新发布项目？试试日志断点，无痛解决你的问题</p>
<p><img src="http://ww2.sinaimg.cn/bmiddle/0063dNt1jw1f01wj9xzkwj30xa0ke40r.jpg" alt="日志断点"></p>
<blockquote>
<p>触发键：鼠标右键点击断点后–&gt;more–&gt;勾掉suspend 属性（应用不挂起）–&gt;填上想要输出的日志信息</p>
</blockquote>
<h3 id="ADB技巧"><a href="#ADB技巧" class="headerlink" title="ADB技巧"></a>ADB技巧</h3><p>adb作为android开发一个常用的工具，神马install,uninstall,push,pull命令就不用说了，它还有很多有用命令。。</p>
<ul>
<li>删除文件夹及其下面所有文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell rm -r /sdcard/xx/</div></pre></td></tr></table></figure>
<ul>
<li>应用程序恢复初始状态:清除数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell pm clear com.xx.xx(包名)</div></pre></td></tr></table></figure>
<ul>
<li>测试软件的稳定性、健壮</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell monkey --ignore-crashes --ignore-timeouts --ignore-security-exceptions --monitor-native-crashes --ignore-native-crashes -s 100 -v -v --throttle 100 -p com.xx.xx(包名) 10000 &gt; ~/Downloads/monkey_test.txt</div></pre></td></tr></table></figure>
<ul>
<li>获取设备分辨率</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">adb shell wm size</div><div class="line">或者</div><div class="line">adb shell dumpsys display | grep  DisplayDeviceInfo</div></pre></td></tr></table></figure>
<blockquote>
<p>adb shell dumpsys： 个人觉得是最有用的adb命令，默认打印出当前系统所有service信息，在后面可加上具体的服务名。  需要列出当前运行的服务，可运行：  <code>adb shell dumpsys | grep DUMP</code></p>
</blockquote>
<ul>
<li>获取内存信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys meminfo</div></pre></td></tr></table></figure>
<ul>
<li>要获取具体应用的内存信息，可加上包名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys meminfo com.xx.xx</div></pre></td></tr></table></figure>
<blockquote>
<p>通常来说： Heap Free &gt; Pss Total &gt; Private Dirty</p>
</blockquote>
<p>具体参数说明，可以参考 <a href="http://developer.android.com/intl/zh-cn/tools/debugging/debugging-memory.html" target="_blank" rel="external">官方文档</a></p>
<ul>
<li>列出系统所有属性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">adb shell getprop</div><div class="line"></div><div class="line">&gt; 获取分辨率密度：adb shell getprop |grep ro.sf.lcd_density</div><div class="line"></div><div class="line">&gt; 获取系统版本：  adb shell getprop |grep ro.build.version.release</div></pre></td></tr></table></figure>
<ul>
<li>查看Activity任务栈</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell dumpsys activity activities | sed -En -e &apos;/Running activities/,/Run #0/p&apos;</div></pre></td></tr></table></figure>
<ul>
<li>启动默认浏览器打开一个网页</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell am start -a android.intent.action.VIEW -d http://baidu.com</div></pre></td></tr></table></figure>
<h3 id="网络调试技巧"><a href="#网络调试技巧" class="headerlink" title="网络调试技巧"></a>网络调试技巧</h3><p>日常开发中，不可避免的需要联网操作，这可能就需要懂一些网络调试技巧了，而抓包就是最基本的网络调试技巧。。</p>
<h4 id="HTTP或HTTPS抓包-finddler-windows-charles"><a href="#HTTP或HTTPS抓包-finddler-windows-charles" class="headerlink" title="HTTP或HTTPS抓包( finddler(windows)/charles)"></a>HTTP或HTTPS抓包( finddler(windows)/charles)</h4><p>这个就不多说了，网上教程一大堆。。</p>
<p><a href="http://jingyan.baidu.com/article/335530da80e70319ca41c37c.html?qq-pf-to=pcqq.group" target="_blank" rel="external">charles使用教程</a></p>
<p><a href="http://www.cnblogs.com/TankXiao/p/3063871.html" target="_blank" rel="external">finddler使用教程</a></p>
<h4 id="TCP非实时抓包（tcpdump）"><a href="#TCP非实时抓包（tcpdump）" class="headerlink" title="TCP非实时抓包（tcpdump）"></a>TCP非实时抓包（tcpdump）</h4><p>前提：Root</p>
<ol>
<li><p>从 <a href="http://www.tcpdump.org/#latest-release" target="_blank" rel="external">这里</a> 下载 tcpdump</p>
</li>
<li><p>将 tcpdump 放入手机： <code>adb push ~/tcpdump /data/local/tcpdump</code></p>
</li>
<li><p>将 tcpdump 的权限变为可执行：<code>chmod +x tcpdump</code></p>
</li>
<li><p>开始抓包： </p>
<blockquote>
<p><code>/data/local/tcpdump -vv -s 0 -w /mnt/sdcard/pcapture.pcap</code>。其中 “-s 0” 表示每个包都抓取全部长度，而不是部分长度；”-w /mnt/sdcard/pcapture.pcap” 表示抓取的包写入指定文件；”-vv” 表示显示多一些信息，如果要显示更多信息可以用 “-vvv”</p>
</blockquote>
</li>
<li><p>按下 “contrl+c” 结束抓包。</p>
</li>
<li><p>将”/mnt/sdcard/pcapture.pcap” 移到电脑上： <code>adb pull /mnt/sdcard/pcapture.pcap &lt;指定目录&gt;</code></p>
</li>
<li><p>通过 Wireshark 或者charles进行分析。</p>
</li>
</ol>
<h4 id="TCP实时抓包-wireshark＋tcpdump"><a href="#TCP实时抓包-wireshark＋tcpdump" class="headerlink" title="TCP实时抓包(wireshark＋tcpdump)"></a>TCP实时抓包(wireshark＋tcpdump)</h4><p><a href="http://www.phonesdevelopers.com/1693228/" target="_blank" rel="external">参考文章</a></p>
<p>基本思路：</p>
<p><img src="http://i.imgur.com/ffV4vq4.png" alt="基本思路"></p>
<ul>
<li><p>手机开始抓包:在 adb shell 中运行 <code>/data/local/tcpdump -n -s 0 -w - | nc -l -p 12345</code></p>
</li>
<li><p>将手机抓的包传送到电脑的 Wireshark 中:另开一个终端运行 <code>adb forward tcp:12345 tcp:12345 &amp;&amp; nc 127.0.0.1 12345 | /Applications/Wireshark.app/Contents/MacOS/wireshark -k -S -i -</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一名码农，代码调试是一项不可或缺的工作，过程中总能发现一下能提高效率、有用的小技巧，此文特总结一些工作用到的一些调试技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="调试技巧" scheme="http://blog.adisonhyh.com/tags/%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Android内存泄漏 ——检测、解决和避免</title>
    <link href="http://blog.adisonhyh.com/2016/08/20/Android%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F-%E2%80%94%E2%80%94%E6%A3%80%E6%B5%8B%E3%80%81%E8%A7%A3%E5%86%B3%E5%92%8C%E9%81%BF%E5%85%8D/"/>
    <id>http://blog.adisonhyh.com/2016/08/20/Android内存泄漏-——检测、解决和避免/</id>
    <published>2016-08-19T21:15:26.000Z</published>
    <updated>2016-08-20T15:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为开发人员，在我们的日常开发中，为了构建更好的应用程序，我们需要考虑很多事情以保证应用运行在正轨上，其中之一是要确保我们的应用程序不会崩溃。应用崩溃的一个常见原因是内存泄漏。这方面的问题可以以各种形式表现出来。在大多数情况下，我们看到内存使用率稳步上升，直到应用程序不能分配更多的资源，并不可避免地崩溃。在Java中这往往导致一个<strong>OutOfMemoryException异常</strong>被抛出。在某些罕见的情况下，泄露的类甚至可以逗留很长时间来接收已注册的回调，这会导致一些非常奇怪的错误，并往往抛出臭名昭著的<strong>IllegalStateException异常</strong>。</p>
<p>为了帮助他人在代码分析上减少花费时间，我将介绍内存泄漏的几个例子，阐述在Android Studio中如何检查它们，当然最重要的是如何将其解决。</p>
<a id="more"></a>
<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>在这篇文章中的代码示例的目的是为了促进大家对内存管理有更深的了解，特别是在java。其通用的体系结构，线程管理和代码示例的 HTTP 请求处理在真实的生产环境并不是理想的，这些示例仅仅为了说明一个问题：在Android中，内存泄漏是一件要考虑的事情。</p>
<h4 id="监听器注册"><a href="#监听器注册" class="headerlink" title="监听器注册"></a>监听器注册</h4><p>这真的不应该是个问题，但我经常看到各种注册方法的调用，但他们对应的注销方法却无处可寻。这是泄漏的潜在来源，因为这些方法明确设计成互相抵消。如果没有调用注销方法，被引用的对象已经被终止后，监听实例可能会持有该对象很长的时间，从而导致泄漏内存。在Android中，如果该对象是一个Activity对象，是特别麻烦的，因为他们往往拥有大量的数据。让我告诉你，可能是什么样子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaksActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LocationListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LocationManager locationManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_leaks);</div><div class="line">        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);</div><div class="line">        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,</div><div class="line">                TimeUnit.MINUTES.toMillis(<span class="number">5</span>), <span class="number">100</span>, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Listener implementation omitted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，我们让Android的 <a href="https://developer.android.com/reference/android/location/LocationManager.html" target="_blank" rel="external"><strong>LocationManager</strong></a>通知我们位置更新。我们所需要做的就是获取系统服务本身和设置一个回调来接收更新。在这里，我们在Activity中实现了位置监听接口，这意味着<strong>LocationManager</strong>将持有该Activity的引用。现在，如果该设备被旋转，新的Activity将被创建并取代已经注册位置更新接口的旧的Activity。由于系统服务存活时间肯定比任何Activity都要长，<strong>LocationManager</strong>仍然持有以前的Activity的引用，这使GC不可能回收依赖于以前的Activity的资源，从而导致内存泄漏。如果反复旋转设备，将导致大量的不可回收的Activity填满内存，最终导致<strong>OutOfMemoryException异常</strong>。</p>
<p>但为了解决内存泄漏，我们首先必须要能够找到它。幸运的是，<strong>Android Studio</strong>有一个叫做 <strong>Android Monitor</strong>的内置工具，我们可以用它来 观察除应用内存使用情况。我们需要做的仅仅是打开Android Monitor 并转到对应tab，看看使用了多少内存和内存实时分配情况。</p>
<p><img src="http://ww4.sinaimg.cn/mw690/0063dNt1jw1f6zscmk95cj30no0hodi4.jpg" alt="1-3R36AJUjtdBArkIxPuED3g.png"></p>
<p>任何导致资源分配的交互都在这里反映出来，使之成为跟踪应用程序的资源使用情况的理想场所。为了找到内存泄露，当我们怀疑在某个时间点内存被泄露时，我们需要知道在该时间点包含了那些内存。对于这个特殊的例子，我们所要做的就是启动我们的应用程序，然后旋转设备一次，然后调用<strong>Dump Java Heap</strong>操作（在<strong>Memory</strong>的旁边，从左边数起第三个图标）。这将生成一个<strong>HPROF</strong>文件，其中包含我们调用该操作时的一个内存快照。几秒钟后，Android Studio 会自动打开该文件，给我们更易于分析内存的直观表示。</p>
<p>我不会去深入有关如何分析巨大的内存堆。相反，我会把你的注意力引导到 <strong>Analyzer Tasks</strong>（下面截图中的右上角）。为了检测上面的例子中引入的内存泄漏，你所需要做的检测是检查泄露的Activity（<strong>Detect Leaked Activities</strong>），点击播放按钮然后在<strong>Analysis Results</strong>下面就会显示泄露的Activity情况。 </p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zscmteaaj310t0kd7c5.jpg" alt="Paste_Image.png"></p>
<p>如果我们选中泄露的Activity，可以得到一个引用树，该引用树可以检测持有该Activity的引用。通过寻找深度为零的实例，我们发现位置管理器中的实例<strong>mListener</strong>，是我们的Activity不能被GC回收的原因。回到我们的代码，我们可以看到，这个引用是由于我们在<strong>requestLocationsUpdates</strong>方法中设置Activity作为位置更新回调导致的。通过阅读<a href="https://developer.android.com/reference/android/location/LocationManager.html" target="_blank" rel="external">位置管理器文档</a>，问题很快变得清晰，为了取消回调设置，我们简单地调用<strong>removeUpdates</strong>方法就行了。在我们的例子，因为我们注册更新是在<strong>onCreate</strong>方法，显然要注销的地方在<strong>onDestroy</strong>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaksActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">LocationListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LocationManager locationManager;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_leaks);</div><div class="line">        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);</div><div class="line">        locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER,</div><div class="line">                TimeUnit.MINUTES.toMillis(<span class="number">5</span>), <span class="number">100</span>, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        locationManager.removeUpdates(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Listener implementation omitted</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新构建程序并执行与上述相同的内存分析，无论旋转多少次设备，应该都不会导致Activity泄漏。</p>
<h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>内部类在Java中是一个很常见的数据结构。它们很受欢迎，因为它们可以以这样的方式来定义：即只有外部类可以实例化它们。很多人可能没有意识到的是这样的类会持有外部类的隐式引用。隐式引用很容易出错，尤其是当两个类具有不同的生命周期。以下是常见的Android Activity写法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView textView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_async);</div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> BackgroundTask().execute();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">// Do background work. Code omitted.</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"some string"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            textView.setText(result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种特殊的实现在执行上没有问题。问题是，它保留内存的时间肯定会超过必要的时间。由于<strong>BackgroundTask</strong>持有一个<strong>AsyncActivity</strong>隐式引用并运行在另一个没有取消策略的线程上，它将保留AsyncActivity在内存中的所有资源连接，直到后台线程终止运行。在HTTP请求的情况下，这可能需要很长的时间，尤其是在速度较慢的连接。</p>
<p>通过执行相同的步骤，如同前面的示例，并确保长时间运行的后台任务，我们最终会得到下面的分析结果。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zscmy9rvj30xd0if126.jpg" alt="Paste_Image.png"></p>
<p>从上面的分析中可以看出，<strong>BackgroundTask</strong> 确实是这种内存泄漏的罪魁祸首。我们第一要务是使用静态类的实现方式来消除指向Activity的引用，但这样我们也不能直接访问 textView 了。因此我们还需要添加一个构造函数，把textView作为参数传递进来。最后，我们需要引入<a href="http://developer.android.com/reference/android/os/AsyncTask.html" target="_blank" rel="external">AsyncTask文档</a>中所述的取消策略。考虑到所有这一切，让我们看看我们的代码最终呈现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView textView;</div><div class="line">    AsyncTask task;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_async);</div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        task = <span class="keyword">new</span> BackgroundTask(textView).execute();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        task.cancel(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView resultTextView;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BackgroundTask</span><span class="params">(TextView resultTextView)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.resultTextView = resultTextView;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// Cancel task. Code omitted.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">// Do background work. Code omitted.</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"some string"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            resultTextView.setText(result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，隐式引用已被消除，我们通过构造函数传递相关实例，并在合适的地方取消任务。让我们再运行分析任务，看看这种改变是否消除了内存泄漏。</p>
<p><img src="http://ww3.sinaimg.cn/mw690/0063dNt1jw1f6zscmdtifj30xd0if11s.jpg" alt="Paste_Image.png"></p>
<p>看来我们还有一些工作要做。根据前一个例子的经验，我们可以知道在引用树中高亮标注的实例导致了Activity泄露。那么这是什么回事？我们看一下它的父节点就可以发现resultTextView持有一个<strong>mContext</strong>引用，毫无疑问，它就是泄露的Activity的引用。那么如何解决这个问题？我们无法消除resultTextView绑定的context引用，因为我们需要在<strong>BackgroundTask</strong>中使用resultTextView的引用，以便更新用户界面。为了解决这个问题，一种简单的方法是使用<a href="https://developer.android.com/reference/java/lang/ref/WeakReference.html" target="_blank" rel="external"><strong>WeakReference</strong></a>。我们持有的<strong>resultTextView</strong>引用是强引用，具有防止GC回收的能力。相反，<strong>WeakReference</strong>不保证其引用的实例存活。当一个实例最后一个强引用被删除，GC会把其资源回收，而不管这个实例是否有弱引用。下面是使用WeakReference的最终版本：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView textView;</div><div class="line">    AsyncTask task;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_async);</div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        task = <span class="keyword">new</span> BackgroundTask(textView).execute();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        task.cancel(<span class="keyword">true</span>);</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BackgroundTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;TextView&gt; textViewReference;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BackgroundTask</span><span class="params">(TextView resultTextView)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.textViewReference = <span class="keyword">new</span> WeakReference&lt;&gt;(resultTextView);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="comment">// Cancel task. Code omitted.</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">            <span class="comment">// Do background work. Code omitted.</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"some string"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</div><div class="line">            TextView view = textViewReference.get();</div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                view.setText(result);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>请注意，在<strong>onPostExecute</strong>我们要检查空值，判断实例是否被回收。</p>
<p>最后，再一次运行分析器任务，确认我们的Activity不再被泄露 ！</p>
<h4 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h4><p>这种类型的类和内部类有同样的缺点，即他们持有外部类的引用。如同内部类，一个匿名类在Activity生命周期之外执行或在其他线程执行工作时，可能会导致内存泄漏。在这个例子中，我将使用流行的HTTP请求库<a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit</a>执行API调用，并传递响应给对应回调。根据<a href="http://square.github.io/retrofit/" target="_blank" rel="external">Retrofit homepage</a>上面例子对Retrofit进行配置。我会在Application中持有<strong>GitHubService</strong>引用，这不是一个特别好的设计，这仅仅服务于这个例子的目的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView textView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_listener);</div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        GitHubService service = ((LeaksApplication) getApplication()).getService();</div><div class="line">        service.listRepos(<span class="string">"google"</span>)</div><div class="line">                .enqueue(<span class="keyword">new</span> Callback&lt;List&lt;Repo&gt;&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;List&lt;Repo&gt;&gt; call,</span></span></div><div class="line">                                           Response&lt;List&lt;Repo&gt;&gt; response) &#123;</div><div class="line">                        <span class="keyword">int</span> numberOfRepos = response.body().size();</div><div class="line">                        textView.setText(String.valueOf(numberOfRepos));</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">                        <span class="comment">// Code omitted.</span></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是常见的解决方案，不应该导致任何泄漏。但是，如果我们在慢速连接中执行这个例子，分析结果会有所不同。请记住，直到该线程终止，该Activity会一直被持有，就像在内部类的例子。</p>
<p><img src="http://ww1.sinaimg.cn/mw690/0063dNt1jw1f6zscn7huij311l0l3qb4.jpg" alt="Paste_Image.png"></p>
<p> 根据在内部类的例子中同样的推理，我们得出一个结论：匿名回调类是内存泄漏的原因。然而，正如内部类的例子，此代码包含两个问题。首先，请求没有取消策略。其次，需要消除对Activity的隐式引用。明显的解决办法：我们在内部类的例子做了同样的事情。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    TextView textView;</div><div class="line">    Call call;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_listener);</div><div class="line">        textView = (TextView) findViewById(R.id.textView);</div><div class="line"></div><div class="line">        GitHubService service = ((LeaksApplication) getApplication()).getService();</div><div class="line">        call = service.listRepos(<span class="string">"google"</span>);</div><div class="line">        call.enqueue(<span class="keyword">new</span> RepoCallback(textView));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        call.cancel();</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RepoCallback</span> <span class="keyword">implements</span> <span class="title">Callback</span>&lt;<span class="title">List</span>&lt;<span class="title">Repo</span>&gt;&gt; </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;TextView&gt; resultTextView;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RepoCallback</span><span class="params">(TextView resultTextView)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.resultTextView = <span class="keyword">new</span> WeakReference&lt;&gt;(resultTextView);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;List&lt;Repo&gt;&gt; call,</span></span></div><div class="line">                Response&lt;List&lt;Repo&gt;&gt; response) &#123;</div><div class="line">            TextView view = resultTextView.get();</div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">int</span> numberOfRepos = response.body().size();</div><div class="line">                view.setText(String.valueOf(numberOfRepos));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;List&lt;Repo&gt;&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">            <span class="comment">// Code omitted.</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据上述解决方案，运行分析任务，将不会再有Activity的泄露。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>后台任务独立于Activity的生命周期运行是一件麻烦事。再加上需要协调用户界面和各种后台任务之间的数据流，如果你不小心，那将是一个灾难。所以要知道你在做什么，以及你的代码是否对性能有影响。这些基本准则是处理Activity的良好开端：</p>
<ul>
<li><strong>尽量使用静态内部类。</strong>每个非静态内部类将持有一个外部类的隐式引用，这可能会导致不必要的问题。使用静态内部类代替非静态内部类，并通过弱引用存储一些必要的生命周期引用。</li>
<li><strong>考虑后台服务等手段，</strong> Android提供了多种在非主线程工作的方法，如<strong>HandlerThread</strong>，<strong>IntentService</strong>和<strong>AsyncTask</strong>，它们每个都有自己的优缺点。另外，Android提供了一些机制来传递信息给主线程以更新UI。譬如，<strong>广播接收器</strong>就可以很方便实现这一点。</li>
<li><strong>不要一味依赖垃圾回收器。</strong>使用具有垃圾回收功能的语言编码很容易有这样的想法：即没必要考虑内存管理。我们的示例清楚地表明，并非如此。因此，请确保你分配的资源都被预期回收。</li>
</ul>
<h4 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a><a href="https://medium.com/freenet-engineering/memory-leaks-in-android-identify-treat-and-avoid-d0b1233acc8#.9r06xyg05" target="_blank" rel="external">原文链接</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为开发人员，在我们的日常开发中，为了构建更好的应用程序，我们需要考虑很多事情以保证应用运行在正轨上，其中之一是要确保我们的应用程序不会崩溃。应用崩溃的一个常见原因是内存泄漏。这方面的问题可以以各种形式表现出来。在大多数情况下，我们看到内存使用率稳步上升，直到应用程序不能分配更多的资源，并不可避免地崩溃。在Java中这往往导致一个&lt;strong&gt;OutOfMemoryException异常&lt;/strong&gt;被抛出。在某些罕见的情况下，泄露的类甚至可以逗留很长时间来接收已注册的回调，这会导致一些非常奇怪的错误，并往往抛出臭名昭著的&lt;strong&gt;IllegalStateException异常&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了帮助他人在代码分析上减少花费时间，我将介绍内存泄漏的几个例子，阐述在Android Studio中如何检查它们，当然最重要的是如何将其解决。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="性能优化" scheme="http://blog.adisonhyh.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ZeusPlugin:掌阅Android App插件补丁实践</title>
    <link href="http://blog.adisonhyh.com/2016/08/20/ZeusPlugin-%E6%8E%8C%E9%98%85Android-App%E6%8F%92%E4%BB%B6%E8%A1%A5%E4%B8%81%E5%AE%9E%E8%B7%B5/"/>
    <id>http://blog.adisonhyh.com/2016/08/20/ZeusPlugin-掌阅Android-App插件补丁实践/</id>
    <published>2016-08-19T18:46:27.000Z</published>
    <updated>2016-08-20T15:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><ul>
<li><p>65K方法数超限</p>
<p>随着应用不断迭代，业务线的扩展,应用越来越大，那么很不幸，总有一天，当你编译的时候，会遇到一个类似下面的错误：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Conversion to Dalvik format failed: Unable to execute dex: method ID not in [<span class="number">0</span>, <span class="number">0xffff</span>]: <span class="number">65536</span></div></pre></td></tr></table></figure>
<p>没错，这就是臭名昭著的65536方法数超限问题。具体原理可以参考<a href="http://jayfeng.com/2016/03/10/%E7%94%B1Android-65K%E6%96%B9%E6%B3%95%E6%95%B0%E9%99%90%E5%88%B6%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="external">由Android 65K方法数限制引发的思考</a>这篇文章。当然，google也意识到这个问题，所以发布了MultiDex支持库。喜大普奔，赶紧使用，问题解决？Too Young ! 使用过程中，你会发现MultiDex有不少坑：启动时间过长、ANR/Crash。当然也有解决方法，可以参考<a href="http://tech.meituan.com/mt-android-auto-split-dex.html" target="_blank" rel="external">美团自动拆包方案</a>。但我只想说真的太….麻烦了，还能不能愉快地回家玩游戏了….</p>
<a id="more"></a></li>
<li><p>上线太慢，更新率太低</p>
<p>总所周知，Android APP发布流程较为漫长，一般需要经历<code>开发完成—上传市场—审核—上线</code>几个阶段，而且各个市场都各有各的政策和审核速度，每发一版都是一次煎熬呀。再者，Android APP的升级率跟Android系统升级率一样，怎一个慢字了得。新版本要覆盖80%左右，怎么也需要两周左右。</p>
</li>
<li><p>一上线就如临大敌</p>
<p>以为应用上线就完事了？NO ！相信大部分开发同学在应用上线的头一周都是过得提心吊胆的，祈祷着不要出bug，用户不要反馈问题。但往往事与愿违，怎么办，赶紧出hotfix版本？</p>
</li>
</ul>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>就不卖关子了，是的，我们的解决方案是构建一套插件补丁的方案，期望可以无痛解决以上问题。插件化和补丁在目前看来是老生常谈的东西了，市面上已经有一堆实现方案，如<a href="https://github.com/Qihoo360/DroidPlugin" target="_blank" rel="external">DroidPlugin</a>、<a href="https://github.com/wequick/Small" target="_blank" rel="external">Small</a>、<a href="https://github.com/limpoxe/Android-Plugin-Framework" target="_blank" rel="external">Android-Plugin-Framework</a>。掌阅研究插件化是从2014年中开始，研究补丁是从2016年初开始，相对来说，算是比较晚。直至目前，插件化方案已经达到相对成熟的阶段，而补丁方案也已经上线。秉着开源的精神，我们的插件补丁方案最近已经在Github开源— <a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>。相对其他插件化和热修复方案，ZeusPlugin最大特点是：<strong>简单易懂，核心类只有6个，类总数只有13个</strong>，我们期望开发同学在使用这套方案的同时能理解所有的实现细节，在我们看来，这确实不是什么晦涩难懂的东西。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>要实现插件补丁，其实无非就是要解决几个问题：<strong>插件安装、资源加载和类加载</strong>。这几点，我们可以参考Android系统加载APK的实现原理。</p>
<h4 id="Android系统加载APK"><a href="#Android系统加载APK" class="headerlink" title="Android系统加载APK"></a>Android系统加载APK</h4><ul>
<li><p><strong>APK安装过程</strong></p>
<ol>
<li><p>复制APK安装包到data/app临时目录下，如<code>vmdl648417937.tmp/base.apk</code>；</p>
</li>
<li><p>解析应用程序的配置文件<code>AndroidManifest.xml</code>；</p>
</li>
<li><p>进行Dexopt并生成ODEX,如<code>vmdl648417937.tmp/oat/arm/base.odex</code>；</p>
</li>
<li><p>将临时目录(vmdl648417937.tmp)重命名为<code>packageName + &quot;-&quot; + suffix</code>,如<code>com.test_1</code>；</p>
</li>
<li><p>在PackageManagerService中将上述步骤生成的apk信息通过mPackages成员变量缓存起来；</p>
<blockquote>
<p>mPackages是个ArrayMap，key为包名，value为<a href="https://android.googlesource.com/platform/frameworks/base/+/56a2301/core/java/android/content/pm/PackageParser.java" target="_blank" rel="external">PackageParser.Package</a>(apk包信息)</p>
</blockquote>
</li>
<li><p>在data/data目录下创建对应的应用数据目录。</p>
</li>
</ol>
</li>
<li><p><strong>启动APK过程</strong></p>
<ol>
<li>点击桌面App图标，Launcher接收到点击事件，获取应用信息，通过Binder IPC向SystemService进程(即system_process)发起startActivity请求(ActivityManagerService(AMS)#startActivity)；</li>
<li>SystemServer(AMS) 向zygote进程请求启动一个新进程（ActivityManagerService#startProcessLocked）；</li>
<li>Zygote进程fork出新的子进程(APP进程)，在新进程中执行 ActivityThread 类的 main 方法；</li>
<li>App进程创建ActivityThread实例，并通过Binder IPC向 SystemServer(AMS) 请求 attach 到 AMS;</li>
<li>SystemServer(AMS) 进程在收到请求后，进行一系列准备工作后，再通过binder IPC向App进程发送<code>bindApplication</code>和<code>scheduleLaunchActivity</code>请求；</li>
<li>App进程(ActivityThread）在收到<code>bindApplication</code>请求后，通过handler向主线程发送<code>BIND_APPLICATION</code>消息；</li>
<li>主线程在收到<code>BIND_APPLICATION</code>消息后,根据传递过来的ApplicationInfo创建一个对应的LoadApk对象(标志当前APK信息),然后创建ContextImpl对象(标志当前进程的环境)，紧接着通过反射创建目标Application，并调用其attach方法，将ContextImpl对象设置为目标Application的上下文环境，最后调用Application的onCreate函数，做一些初始工作；</li>
<li>App进程(ApplicationThread）在收到<code>scheduleLaunchActivity</code>请求后，通过handler向主线程发送<code>LAUNCH_ACTIVITY</code>消息；</li>
<li>主线程在收到<code>LAUNCH_ACTIVITY</code>消息后，通过反射机制创建目标Activity，并调用Activity的onCreate()方法。</li>
</ol>
</li>
</ul>
<p>以上分析都是基于Android 6.0的源码，其他版本可能有少许差异，但不影响主流程，限于篇幅问题，在此不一一展开分析，只重点分析相关的关键几个步骤。</p>
<p>为什么提到<strong>Android系统加载APK</strong>的流程，因为分析完<strong>Android系统加载APK</strong>的流程，插件补丁方案也就基本能实现出来了，下面我展开说一下。</p>
<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>从APK安装过程分析得知</p>
<ol>
<li><strong>配置文件<code>AndroidManifest.xml</code>是在应用安装时就已经解析并记录，所以插件的AndroidManifest.xml配置无法生效</strong></li>
<li><strong>每个APK安装都是独享空间的，不同APK、同一个APK的不同时间安装都是完全独立的</strong>。这样做，个人觉得大大降低了系统的复杂度，而且清晰明了。在这点上， <a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>插件安装策略几乎就是仿照系统设计的。具体可以参考 <a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>源码，在此不展开描述。</li>
</ol>
<h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><p>   从上述启动APK过程分析7、9可以得知，Application和Activity都是通过反射机制创建的，我们可以看看Application创建具体源码实现：</p>
<p>   ActivityThread#handleBindApplication</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</div><div class="line">         	......</div><div class="line">             <span class="comment">//省略代码</span></div><div class="line">   	    .......</div><div class="line">             <span class="comment">//生成APK信息LoadedApk，即packageInfo</span></div><div class="line">           data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</div><div class="line">      		 <span class="comment">//创建上下文环境</span></div><div class="line">           <span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</div><div class="line">    		......</div><div class="line">             <span class="comment">//省略代码</span></div><div class="line">   	    .......</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">               <span class="comment">// If the app is being launched for full backup or restore, bring it up in</span></div><div class="line">               <span class="comment">// a restricted environment with the base application class.</span></div><div class="line">             	<span class="comment">//通过反射机制创建Application实例</span></div><div class="line">               Application app = data.info.makeApplication(data.restrictedBackupMode, <span class="keyword">null</span>);</div><div class="line">               mInitialApplication = app;</div><div class="line"></div><div class="line">           	......</div><div class="line">             	<span class="comment">//省略代码</span></div><div class="line">   	   		 .......</div><div class="line"></div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                  	<span class="comment">//调用Application onCreate方法·</span></div><div class="line">                   mInstrumentation.callApplicationOnCreate(app);</div><div class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                   <span class="keyword">if</span> (!mInstrumentation.onException(app, e)) &#123;</div><div class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                           <span class="string">"Unable to create application "</span> + app.getClass().getName()</div><div class="line">+ <span class="string">": "</span> + e.toString(), e);</div><div class="line">                         &#125;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          StrictMode.setThreadPolicy(savedPolicy);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>  我们再看看<code>LoadedApk#makeApplication</code>的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Application <span class="title">makeApplication</span><span class="params">(<span class="keyword">boolean</span> forceDefaultAppClass,</span></span></div><div class="line">           Instrumentation instrumentation) &#123;</div><div class="line">       <span class="keyword">if</span> (mApplication != <span class="keyword">null</span>) &#123;</div><div class="line">           <span class="keyword">return</span> mApplication;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       Application app = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">       String appClass = mApplicationInfo.className;</div><div class="line">       <span class="keyword">if</span> (forceDefaultAppClass || (appClass == <span class="keyword">null</span>)) &#123;</div><div class="line">           appClass = <span class="string">"android.app.Application"</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">         	<span class="comment">//获取ClassLoader</span></div><div class="line">           java.lang.ClassLoader cl = getClassLoader();</div><div class="line">           <span class="keyword">if</span> (!mPackageName.equals(<span class="string">"android"</span>)) &#123;</div><div class="line">               initializeJavaContextClassLoader();</div><div class="line">           &#125;</div><div class="line">           ContextImpl appContext = ContextImpl.createAppContext(mActivityThread, <span class="keyword">this</span>);</div><div class="line">           <span class="comment">//使用获取到的ClassLoader通过反射机制创建Application实例，其内部实现是通过		ClassLoader.loadClass(className)得到Application Class</span></div><div class="line">           app = mActivityThread.mInstrumentation.newApplication(</div><div class="line">                   cl, appClass, appContext);</div><div class="line">           appContext.setOuterContext(app);</div><div class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">           <span class="keyword">if</span> (!mActivityThread.mInstrumentation.onException(app, e)) &#123;</div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                   <span class="string">"Unable to instantiate application "</span> + appClass</div><div class="line">                   + <span class="string">": "</span> + e.toString(), e);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       mActivityThread.mAllApplications.add(app);</div><div class="line">       mApplication = app;</div><div class="line"></div><div class="line">      ......</div><div class="line">       <span class="comment">//省略代码</span></div><div class="line">   .......</div><div class="line"></div><div class="line">       <span class="keyword">return</span> app;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>  从上述代码可以得知，系统加载Application时候是先获取一个特定ClassLoader，然后该ClassLoader通过反射机制创建Application实例。我们继续看看getClassLoader()的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mClassLoader != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> mClassLoader;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mIncludeCode &amp;&amp; !mPackageName.equals(<span class="string">"android"</span>)) &#123;</div><div class="line">                ......</div><div class="line">       		 <span class="comment">//省略代码</span></div><div class="line">	 		  .......</div><div class="line">			   <span class="comment">//创建ClassLoader</span></div><div class="line">                mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip, lib,</div><div class="line">                        mBaseClassLoader);</div><div class="line"></div><div class="line">                StrictMode.setThreadPolicy(oldPolicy);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (mBaseClassLoader == <span class="keyword">null</span>) &#123;</div><div class="line">                    mClassLoader = ClassLoader.getSystemClassLoader();</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mClassLoader = mBaseClassLoader;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> mClassLoader;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  继续跟踪ApplicationLoaders类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">(String zip, String libPath, ClassLoader parent)</span></span></div><div class="line">&#123;</div><div class="line">  </div><div class="line">    ClassLoader baseParent = ClassLoader.getSystemClassLoader().getParent();</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (mLoaders) &#123;</div><div class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</div><div class="line">            parent = baseParent;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * If we're one step up from the base class loader, find</div><div class="line">         * something in our cache.  Otherwise, we create a whole</div><div class="line">         * new ClassLoader for the zip archive.</div><div class="line">         */</div><div class="line">        <span class="keyword">if</span> (parent == baseParent) &#123;</div><div class="line">            ClassLoader loader = mLoaders.get(zip);</div><div class="line">            <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> loader;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, zip);</div><div class="line">          </div><div class="line">            PathClassLoader pathClassloader =</div><div class="line">                <span class="keyword">new</span> PathClassLoader(zip, libPath, parent);</div><div class="line">            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">  		</div><div class="line">            mLoaders.put(zip, pathClassloader);</div><div class="line">            <span class="keyword">return</span> pathClassloader;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, zip);</div><div class="line">        PathClassLoader pathClassloader = <span class="keyword">new</span> PathClassLoader(zip, parent);</div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        <span class="keyword">return</span> pathClassloader;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> ApplicationLoaders是一个静态缓存工具类，其内部维护了一个key为dexPath，value为PathClassLoader的ArrayMap，可以看到，应用程序使用的ClassLoader都是同一个PathClassLoader类的实例</p>
<p> 我们继续扒一扒PathClassLoader的源码，发现其实现都在父类<a href="https://android.googlesource.com/platform/libcore-snapshot/+/ics-mr1/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java" target="_blank" rel="external">BaseDexClassLoader</a>中，我们直接找到其<code>findClass</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</div><div class="line">        List&lt;Throwable&gt; suppressedExceptions = <span class="keyword">new</span> ArrayList&lt;Throwable&gt;();</div><div class="line">        Class c = pathList.findClass(name, suppressedExceptions);</div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">            ClassNotFoundException cnfe = <span class="keyword">new</span> ClassNotFoundException(<span class="string">"Didn't find class \""</span> + name + <span class="string">"\" on path: "</span> + pathList);</div><div class="line">            <span class="keyword">for</span> (Throwable t : suppressedExceptions) &#123;</div><div class="line">                cnfe.addSuppressed(t);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> cnfe;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>  可以看到，查找Class的任务通其内部一个<code>DexPathList</code>类对象实现的，它的<code>findClass</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">findClass</span><span class="params">(String name, List&lt;Throwable&gt; suppressed)</span> </span>&#123;</div><div class="line">       <span class="keyword">for</span> (Element element : dexElements) &#123;</div><div class="line">           DexFile dex = element.dexFile;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (dex != <span class="keyword">null</span>) &#123;</div><div class="line">               Class clazz = dex.loadClassBinaryName(name, definingContext, suppressed);</div><div class="line">               <span class="keyword">if</span> (clazz != <span class="keyword">null</span>) &#123;</div><div class="line">                   <span class="keyword">return</span> clazz;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (dexElementsSuppressedExceptions != <span class="keyword">null</span>) &#123;</div><div class="line">           suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>至此，真相大白，原来，APK类加载是通过遍历<code>dexElements</code>这个数组来查找Class，而dexElements就是APK dexPath里面的文件。</p>
<p>从上述分析可以得知要实现插件的类加载有两种方式：</p>
<ol>
<li><strong>把插件的信息通过反射放进这个数组里面</strong></li>
<li><p><strong>替换系统的ClassLoader</strong></p>
<p>考虑到类的隔离性以及框架拓展性，<a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>目前使用的方案是第二种，根据类加载器的双亲委派模型，我们可以实现一套插件补丁类加载方案，如下图：</p>
</li>
</ol>
<p><img src="http://ww4.sinaimg.cn/mw690/0063dNt1jw1f6zsc3wnlyj30qo0k0jru.jpg" alt="类加载.jpg"></p>
<blockquote>
<ol>
<li>我们通过反射修改系统的ClassLoader为ZeusClassLoader，其内包含多个ZeusPluginClassLoader</li>
<li>每一个插件对应一个ZeusPluginClassLoader，当移除插件时则删除一个ZeusPluginClassLoader，加载一个插件则添加一个ZeusPluginClassLoader，</li>
<li>ZeusClassLoader的parent为原始APK的ClassLoader(PathClassLoader)，而原始APK的ClassLoader的parent(PathClassLoader)为ZeusHotfixClassLoader, ZeusHotfixClassLoader的parent为系统的ClassLoader(BootClassLoader)。</li>
</ol>
</blockquote>
<h4 id="资源加载"><a href="#资源加载" class="headerlink" title="资源加载"></a>资源加载</h4><p>  关于资源加载，我们回到<code>handleBindApplication</code>方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleBindApplication</span><span class="params">(AppBindData data)</span> </span>&#123;</div><div class="line">      	......</div><div class="line">          <span class="comment">//省略代码</span></div><div class="line">	    .......</div><div class="line">          <span class="comment">//生成APK信息LoadedApk，即packageInfo</span></div><div class="line">        data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</div><div class="line">   		 <span class="comment">//创建上下文环境</span></div><div class="line">        <span class="keyword">final</span> ContextImpl appContext = ContextImpl.createAppContext(<span class="keyword">this</span>, data.info);</div><div class="line"> 		......</div><div class="line">          <span class="comment">//省略代码</span></div><div class="line">	    .......</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p> 这里创建了上下文环境，即ContextImpl，再看看createAppContext方法真正实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">ContextImpl</span><span class="params">(ContextImpl container, ActivityThread mainThread,</span></span></div><div class="line">            LoadedApk packageInfo, IBinder activityToken, UserHandle user, <span class="keyword">boolean</span> restricted,</div><div class="line">            Display display, Configuration overrideConfiguration, <span class="keyword">int</span> createDisplayWithId) &#123;</div><div class="line">        ......</div><div class="line">          <span class="comment">//省略代码</span></div><div class="line">	    .......</div><div class="line">		<span class="comment">//真正创建Resources的地方</span></div><div class="line">        Resources resources = packageInfo.getResources(mainThread);</div><div class="line">        <span class="keyword">if</span> (resources != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (displayId != Display.DEFAULT_DISPLAY</div><div class="line">                    || overrideConfiguration != <span class="keyword">null</span></div><div class="line">                    || (compatInfo != <span class="keyword">null</span> &amp;&amp; compatInfo.applicationScale</div><div class="line">                            != resources.getCompatibilityInfo().applicationScale)) &#123;</div><div class="line">                resources = mResourcesManager.getTopLevelResources(packageInfo.getResDir(),</div><div class="line">                        packageInfo.getSplitResDirs(), packageInfo.getOverlayDirs(),</div><div class="line">                        packageInfo.getApplicationInfo().sharedLibraryFiles, displayId,</div><div class="line">                        overrideConfiguration, compatInfo);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mResources = resources;</div><div class="line">		......</div><div class="line">          <span class="comment">//省略代码</span></div><div class="line">	    .......</div><div class="line">     </div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p> <code>Resources resources = packageInfo.getResources(mainThread);</code>这段代码就是真正创建Resources的地方，我们继续跟进去会发现它最终调用的是ResourcesManager的getTopLevelResources方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="function">Resources <span class="title">getTopLevelResources</span><span class="params">(String resDir, String[] splitResDirs,</span></span></div><div class="line">           String[] overlayDirs, String[] libDirs, <span class="keyword">int</span> displayId,</div><div class="line">           Configuration overrideConfiguration, CompatibilityInfo compatInfo) &#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">float</span> scale = compatInfo.applicationScale;</div><div class="line">       Configuration overrideConfigCopy = (overrideConfiguration != <span class="keyword">null</span>)</div><div class="line">               ? <span class="keyword">new</span> Configuration(overrideConfiguration) : <span class="keyword">null</span>;</div><div class="line">       ResourcesKey key = <span class="keyword">new</span> ResourcesKey(resDir, displayId, overrideConfigCopy, scale);</div><div class="line">       Resources r;</div><div class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">           <span class="comment">// Resources is app scale dependent.</span></div><div class="line">           <span class="keyword">if</span> (DEBUG) Slog.w(TAG, <span class="string">"getTopLevelResources: "</span> + resDir + <span class="string">" / "</span> + scale);</div><div class="line">	   <span class="comment">//判断是否已经存在Resources</span></div><div class="line">           WeakReference&lt;Resources&gt; wr = mActiveResources.get(key);</div><div class="line">           r = wr != <span class="keyword">null</span> ? wr.get() : <span class="keyword">null</span>;</div><div class="line">           <span class="comment">//if (r != null) Log.i(TAG, "isUpToDate " + resDir + ": " + r.getAssets().isUpToDate());</span></div><div class="line">           <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; r.getAssets().isUpToDate()) &#123;</div><div class="line">               <span class="keyword">if</span> (DEBUG) Slog.w(TAG, <span class="string">"Returning cached resources "</span> + r + <span class="string">" "</span> + resDir</div><div class="line">                       + <span class="string">": appScale="</span> + r.getCompatibilityInfo().applicationScale</div><div class="line">                       + <span class="string">" key="</span> + key + <span class="string">" overrideConfig="</span> + overrideConfiguration);</div><div class="line">               <span class="keyword">return</span> r;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="comment">//if (r != null) &#123;</span></div><div class="line">       <span class="comment">//    Log.w(TAG, "Throwing away out-of-date resources!!!! "</span></div><div class="line">       <span class="comment">//            + r + " " + resDir);</span></div><div class="line">       <span class="comment">//&#125;</span></div><div class="line">	<span class="comment">//创建资源管理器</span></div><div class="line">       AssetManager assets = <span class="keyword">new</span> AssetManager();</div><div class="line">       <span class="comment">// resDir can be null if the 'android' package is creating a new Resources object.</span></div><div class="line">       <span class="comment">// This is fine, since each AssetManager automatically loads the 'android' package</span></div><div class="line">       <span class="comment">// already.</span></div><div class="line">       <span class="keyword">if</span> (resDir != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">//添加APK资源路径</span></div><div class="line">           <span class="keyword">if</span> (assets.addAssetPath(resDir) == <span class="number">0</span>) &#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">    ......</div><div class="line">         <span class="comment">//省略代码</span></div><div class="line">    .......</div><div class="line">       <span class="comment">//创建Resources</span></div><div class="line">       r = <span class="keyword">new</span> Resources(assets, dm, config, compatInfo);</div><div class="line">       <span class="keyword">if</span> (DEBUG) Slog.i(TAG, <span class="string">"Created app resources "</span> + resDir + <span class="string">" "</span> + r + <span class="string">": "</span></div><div class="line">               + r.getConfiguration() + <span class="string">" appScale="</span> + r.getCompatibilityInfo().applicationScale);</div><div class="line"></div><div class="line">       <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">           WeakReference&lt;Resources&gt; wr = mActiveResources.get(key);</div><div class="line">           Resources existing = wr != <span class="keyword">null</span> ? wr.get() : <span class="keyword">null</span>;</div><div class="line">           <span class="keyword">if</span> (existing != <span class="keyword">null</span> &amp;&amp; existing.getAssets().isUpToDate()) &#123;</div><div class="line">               <span class="comment">// Someone else already created the resources while we were</span></div><div class="line">               <span class="comment">// unlocked; go ahead and use theirs.</span></div><div class="line">               r.getAssets().close();</div><div class="line">               <span class="keyword">return</span> existing;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">// XXX need to remove entries when weak references go away</span></div><div class="line">           mActiveResources.put(key, <span class="keyword">new</span> WeakReference&lt;&gt;(r));</div><div class="line">           <span class="keyword">if</span> (DEBUG) Slog.v(TAG, <span class="string">"mActiveResources.size()="</span> + mActiveResources.size());</div><div class="line">           <span class="keyword">return</span> r;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p> 至此，Resources就创建好了，这里有一个关键的类AssetManager，它是应用程序的资源管理器，在它的构造函数里会把<code>framework/framework-res.apk</code>也会添加到资源路径中，这是C++调用，有兴趣的话，可以参考一下老罗<a href="http://blog.csdn.net/luoshengyang/article/details/8791064" target="_blank" rel="external">这篇文章</a>。同时这也解释了为什么我们开发的应用可以访问到系统的资源。</p>
<p> 通过上述分析，我们可以得知，要实现插件资源加载，只需<strong>创建一个<code>AssetManager</code>,然后把把宿主资源路径和插件apk路径添加进去，创建我们自己的Resources，然后通过反射把PackageInfo的<code>mResources</code>替换成我们的Resources</strong>即可，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">AssetManager assetManager = AssetManager.class.newInstance();</div><div class="line">           Method addAssetPath = AssetManager.class.getMethod(<span class="string">"addAssetPath"</span>, String.class);</div><div class="line">           addAssetPath.invoke(assetManager, mBaseContext.getPackageResourcePath());</div><div class="line">           <span class="keyword">if</span> (mLoadedPluginList != <span class="keyword">null</span> &amp;&amp; mLoadedPluginList.size() != <span class="number">0</span>) &#123;</div><div class="line">               <span class="comment">//每个插件的packageID都不能一样</span></div><div class="line">               <span class="keyword">for</span> (String id : mLoadedPluginList.keySet()) &#123;</div><div class="line">                   addAssetPath.invoke(assetManager, PluginUtil.getAPKPath(id));</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">           <span class="comment">//这里提前创建一个resource是因为Resources的构造函数会对AssetManager进行一些变量的初始化</span></div><div class="line">           <span class="comment">//还不能创建系统的Resources类，否则中兴系统会出现崩溃问题</span></div><div class="line">           PluginResources newResources = <span class="keyword">new</span> PluginResources(assetManager,</div><div class="line">                   mBaseContext.getResources().getDisplayMetrics(),</div><div class="line">                   mBaseContext.getResources().getConfiguration());</div><div class="line"></div><div class="line"></div><div class="line">           PluginUtil.setField(mBaseContext, <span class="string">"mResources"</span>, newResources);</div><div class="line">           <span class="comment">//这是最主要的需要替换的，如果不支持插件运行时更新，只留这一个就可以了</span></div><div class="line">           PluginUtil.setField(mPackageInfo, <span class="string">"mResources"</span>, newResources);</div></pre></td></tr></table></figure>
<p>现在，参考以上思路，我们已经基本可以实现一个插件补丁框架，其实站在巨人的肩膀(Android 系统源码)上，是不是觉得实现一套插件补丁框架也没那么复杂呢？当然，真正项目中，还有很多细节需要处理，譬如说资源分区、代码混淆等问题。但核心逻辑基本还是以上这些思路。具体实现可以参考 <a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>源码</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>由于公司业务线、时间精力等原因， <a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">ZeusPlugin</a>有一些特性和功能还没实现，但很多也提上日程了，比如：</p>
<ul>
<li><p>demo完善</p>
</li>
<li><p>gradle插件maven远程依赖</p>
</li>
<li><p>支持补丁更换资源</p>
<p>……..</p>
</li>
</ul>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/iReaderAndroid/ZeusPlugin" target="_blank" rel="external">https://github.com/iReaderAndroid/ZeusPlugin</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;遇到问题&quot;&gt;&lt;a href=&quot;#遇到问题&quot; class=&quot;headerlink&quot; title=&quot;遇到问题&quot;&gt;&lt;/a&gt;遇到问题&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;65K方法数超限&lt;/p&gt;
&lt;p&gt;随着应用不断迭代，业务线的扩展,应用越来越大，那么很不幸，总有一天，当你编译的时候，会遇到一个类似下面的错误：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Conversion to Dalvik format failed: Unable to execute dex: method ID not in [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;]: &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没错，这就是臭名昭著的65536方法数超限问题。具体原理可以参考&lt;a href=&quot;http://jayfeng.com/2016/03/10/%E7%94%B1Android-65K%E6%96%B9%E6%B3%95%E6%95%B0%E9%99%90%E5%88%B6%E5%BC%95%E5%8F%91%E7%9A%84%E6%80%9D%E8%80%83/&quot;&gt;由Android 65K方法数限制引发的思考&lt;/a&gt;这篇文章。当然，google也意识到这个问题，所以发布了MultiDex支持库。喜大普奔，赶紧使用，问题解决？Too Young ! 使用过程中，你会发现MultiDex有不少坑：启动时间过长、ANR/Crash。当然也有解决方法，可以参考&lt;a href=&quot;http://tech.meituan.com/mt-android-auto-split-dex.html&quot;&gt;美团自动拆包方案&lt;/a&gt;。但我只想说真的太….麻烦了，还能不能愉快地回家玩游戏了….&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://blog.adisonhyh.com/categories/Android/"/>
    
    
      <category term="Android插件补丁" scheme="http://blog.adisonhyh.com/tags/Android%E6%8F%92%E4%BB%B6%E8%A1%A5%E4%B8%81/"/>
    
  </entry>
  
</feed>
